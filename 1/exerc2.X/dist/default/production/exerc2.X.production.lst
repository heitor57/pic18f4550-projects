

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Apr 02 16:51:23 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.41
    22                           ; Generated 25/01/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4550 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	idataCOMRAM
    57  007CB0                     __pidataCOMRAM:
    58                           	opt stack 0
    59                           
    60                           ;initializer for _n
    61  007CB0  000A               	dw	10
    62                           
    63                           	psect	nvCOMRAM
    64  000012                     __pnvCOMRAM:
    65                           	opt stack 0
    66  000012                     _r:
    67                           	opt stack 0
    68  000012                     	ds	2
    69  0000                     _PORTAbits	set	3968
    70  0000                     _PORTD	set	3971
    71  0000                     _TRISE	set	3990
    72  0000                     _TRISD	set	3989
    73  0000                     _TRISC	set	3988
    74  0000                     _TRISB	set	3987
    75  0000                     _TRISA	set	3986
    76  0000                     _ADCON1	set	4033
    77                           
    78                           ; #config settings
    79  0000                     
    80                           	psect	cinit
    81  007CD4                     __pcinit:
    82                           	opt stack 0
    83  007CD4                     start_initialization:
    84                           	opt stack 0
    85  007CD4                     __initialization:
    86                           	opt stack 0
    87                           
    88                           ; Initialize objects allocated to COMRAM (2 bytes)
    89                           ; load TBLPTR registers with __pidataCOMRAM
    90  007CD4  0EB0               	movlw	low __pidataCOMRAM
    91  007CD6  6EF6               	movwf	tblptrl,c
    92  007CD8  0E7C               	movlw	high __pidataCOMRAM
    93  007CDA  6EF7               	movwf	tblptrh,c
    94  007CDC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    95  007CDE  6EF8               	movwf	tblptru,c
    96  007CE0  0009               	tblrd		*+	;fetch initializer
    97  007CE2  CFF5 F014          	movff	tablat,__pdataCOMRAM
    98  007CE6  0009               	tblrd		*+	;fetch initializer
    99  007CE8  CFF5 F015          	movff	tablat,__pdataCOMRAM+1
   100  007CEC                     end_of_initialization:
   101                           	opt stack 0
   102  007CEC                     __end_of__initialization:
   103                           	opt stack 0
   104  007CEC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   105  007CEE  6EF8               	movwf	tblptru,c
   106  007CF0  0100               	movlb	0
   107  007CF2  EF59  F03E         	goto	_main	;jump to C main() function
   108                           tblptru	equ	0xFF8
   109                           tblptrh	equ	0xFF7
   110                           tblptrl	equ	0xFF6
   111                           tablat	equ	0xFF5
   112                           
   113                           	psect	dataCOMRAM
   114  000014                     __pdataCOMRAM:
   115                           	opt stack 0
   116  000014                     _n:
   117                           	opt stack 0
   118  000014                     	ds	2
   119                           tblptru	equ	0xFF8
   120                           tblptrh	equ	0xFF7
   121                           tblptrl	equ	0xFF6
   122                           tablat	equ	0xFF5
   123                           
   124                           	psect	cstackCOMRAM
   125  000001                     __pcstackCOMRAM:
   126                           	opt stack 0
   127  000001                     ?___wmul:
   128                           	opt stack 0
   129  000001                     ?___lwmod:
   130                           	opt stack 0
   131  000001                     display7s@v:
   132                           	opt stack 0
   133  000001                     atraso_ms@valor:
   134                           	opt stack 0
   135  000001                     ___wmul@multiplier:
   136                           	opt stack 0
   137  000001                     ___lwmod@dividend:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x0
   141  000001                     	ds	2
   142  000003                     atraso_ms@i:
   143                           	opt stack 0
   144  000003                     ___wmul@multiplicand:
   145                           	opt stack 0
   146  000003                     ___lwmod@divisor:
   147                           	opt stack 0
   148                           
   149                           ; 2 bytes @ 0x2
   150  000003                     	ds	2
   151  000005                     atraso_ms@j1:
   152                           	opt stack 0
   153  000005                     ___lwmod@counter:
   154                           	opt stack 0
   155  000005                     ___wmul@product:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0x4
   159  000005                     	ds	1
   160  000006                     atraso_ms@j2:
   161                           	opt stack 0
   162                           
   163                           ; 1 bytes @ 0x5
   164  000006                     	ds	1
   165  000007                     ?___lwdiv:
   166                           	opt stack 0
   167  000007                     ___lwdiv@dividend:
   168                           	opt stack 0
   169                           
   170                           ; 2 bytes @ 0x6
   171  000007                     	ds	2
   172  000009                     ___lwdiv@divisor:
   173                           	opt stack 0
   174                           
   175                           ; 2 bytes @ 0x8
   176  000009                     	ds	2
   177  00000B                     ___lwdiv@quotient:
   178                           	opt stack 0
   179                           
   180                           ; 2 bytes @ 0xA
   181  00000B                     	ds	2
   182  00000D                     ___lwdiv@counter:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0xC
   186  00000D                     	ds	1
   187  00000E                     _loop$646:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0xD
   191  00000E                     	ds	2
   192  000010                     _loop$645:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0xF
   196  000010                     	ds	2
   197  000012                     tblptru	equ	0xFF8
   198                           tblptrh	equ	0xFF7
   199                           tblptrl	equ	0xFF6
   200                           tablat	equ	0xFF5
   201                           
   202                           ; 1 bytes @ 0x11
   203 ;;
   204 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   205 ;;
   206 ;; *************** function _main *****************
   207 ;; Defined at:
   208 ;;		line 80 in file "config.c"
   209 ;; Parameters:    Size  Location     Type
   210 ;;		None
   211 ;; Auto vars:     Size  Location     Type
   212 ;;		None
   213 ;; Return value:  Size  Location     Type
   214 ;;                  1    wreg      void 
   215 ;; Registers used:
   216 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   217 ;; Tracked objects:
   218 ;;		On entry : 0/0
   219 ;;		On exit  : 0/0
   220 ;;		Unchanged: 0/0
   221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   222 ;;      Params:         0       0       0       0       0       0       0       0       0
   223 ;;      Locals:         0       0       0       0       0       0       0       0       0
   224 ;;      Temps:          0       0       0       0       0       0       0       0       0
   225 ;;      Totals:         0       0       0       0       0       0       0       0       0
   226 ;;Total ram usage:        0 bytes
   227 ;; Hardware stack levels required when called:    2
   228 ;; This function calls:
   229 ;;		_loop
   230 ;;		_setup
   231 ;; This function is called by:
   232 ;;		Startup code after reset
   233 ;; This function uses a non-reentrant model
   234 ;;
   235                           
   236                           	psect	text0
   237  007CB2                     __ptext0:
   238                           	opt stack 0
   239  007CB2                     _main:
   240                           	opt stack 29
   241                           
   242                           ;config.c: 82: ADCON1=0x0C;
   243                           
   244                           ;incstack = 0
   245  007CB2  0E0C               	movlw	12
   246  007CB4  6EC1               	movwf	4033,c	;volatile
   247                           
   248                           ;config.c: 83: TRISA = 0XC7;
   249  007CB6  0EC7               	movlw	199
   250  007CB8  6E92               	movwf	3986,c	;volatile
   251                           
   252                           ;config.c: 84: TRISB = 0X07;
   253  007CBA  0E07               	movlw	7
   254  007CBC  6E93               	movwf	3987,c	;volatile
   255                           
   256                           ;config.c: 85: TRISC = 0X01;
   257  007CBE  0E01               	movlw	1
   258  007CC0  6E94               	movwf	3988,c	;volatile
   259                           
   260                           ;config.c: 86: TRISD = 0X00;
   261  007CC2  0E00               	movlw	0
   262  007CC4  6E95               	movwf	3989,c	;volatile
   263                           
   264                           ;config.c: 87: TRISE = 0X00;
   265  007CC6  0E00               	movlw	0
   266  007CC8  6E96               	movwf	3990,c	;volatile
   267                           
   268                           ;config.c: 88: setup();
   269  007CCA  EC8E  F03E         	call	_setup	;wreg free
   270  007CCE                     l972:
   271                           
   272                           ;config.c: 90: {
   273                           ;config.c: 91: loop();
   274  007CCE  EC69  F03F         	call	_loop	;wreg free
   275  007CD2  D7FD               	goto	l972
   276  007CD4                     __end_of_main:
   277                           	opt stack 0
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           
   283 ;; *************** function _setup *****************
   284 ;; Defined at:
   285 ;;		line 16 in file "main.c"
   286 ;; Parameters:    Size  Location     Type
   287 ;;		None
   288 ;; Auto vars:     Size  Location     Type
   289 ;;		None
   290 ;; Return value:  Size  Location     Type
   291 ;;                  1    wreg      void 
   292 ;; Registers used:
   293 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   294 ;; Tracked objects:
   295 ;;		On entry : 0/0
   296 ;;		On exit  : 0/0
   297 ;;		Unchanged: 0/0
   298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   299 ;;      Params:         0       0       0       0       0       0       0       0       0
   300 ;;      Locals:         0       0       0       0       0       0       0       0       0
   301 ;;      Temps:          0       0       0       0       0       0       0       0       0
   302 ;;      Totals:         0       0       0       0       0       0       0       0       0
   303 ;;Total ram usage:        0 bytes
   304 ;; Hardware stack levels used:    1
   305 ;; Hardware stack levels required when called:    1
   306 ;; This function calls:
   307 ;;		___lwdiv
   308 ;;		___wmul
   309 ;; This function is called by:
   310 ;;		_main
   311 ;; This function uses a non-reentrant model
   312 ;;
   313                           
   314                           	psect	text1
   315  007D1C                     __ptext1:
   316                           	opt stack 0
   317  007D1C                     _setup:
   318                           	opt stack 29
   319                           
   320                           ;main.c: 17: PORTD=0;
   321                           
   322                           ;incstack = 0
   323  007D1C  0E00               	movlw	0
   324  007D1E  6E83               	movwf	3971,c	;volatile
   325                           
   326                           ;main.c: 18: r=((n*873)+32346)/10;
   327  007D20  C014  F001         	movff	_n,___wmul@multiplier
   328  007D24  C015  F002         	movff	_n+1,___wmul@multiplier+1
   329  007D28  0E03               	movlw	3
   330  007D2A  6E04               	movwf	___wmul@multiplicand+1,c
   331  007D2C  0E69               	movlw	105
   332  007D2E  6E03               	movwf	___wmul@multiplicand,c
   333  007D30  EC7B  F03E         	call	___wmul	;wreg free
   334  007D34  0E5A               	movlw	90
   335  007D36  2401               	addwf	?___wmul,w,c
   336  007D38  6E07               	movwf	___lwdiv@dividend,c
   337  007D3A  0E7E               	movlw	126
   338  007D3C  2002               	addwfc	?___wmul+1,w,c
   339  007D3E  6E08               	movwf	___lwdiv@dividend+1,c
   340  007D40  0E00               	movlw	0
   341  007D42  6E0A               	movwf	___lwdiv@divisor+1,c
   342  007D44  0E0A               	movlw	10
   343  007D46  6E09               	movwf	___lwdiv@divisor,c
   344  007D48  ECEA  F03E         	call	___lwdiv	;wreg free
   345  007D4C  C007  F012         	movff	?___lwdiv,_r
   346  007D50  C008  F013         	movff	?___lwdiv+1,_r+1
   347  007D54  0012               	return		;funcret
   348  007D56                     __end_of_setup:
   349                           	opt stack 0
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           
   355 ;; *************** function ___wmul *****************
   356 ;; Defined at:
   357 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
   358 ;; Parameters:    Size  Location     Type
   359 ;;  multiplier      2    0[COMRAM] unsigned int 
   360 ;;  multiplicand    2    2[COMRAM] unsigned int 
   361 ;; Auto vars:     Size  Location     Type
   362 ;;  product         2    4[COMRAM] unsigned int 
   363 ;; Return value:  Size  Location     Type
   364 ;;                  2    0[COMRAM] unsigned int 
   365 ;; Registers used:
   366 ;;		wreg, status,2, status,0, prodl, prodh
   367 ;; Tracked objects:
   368 ;;		On entry : 0/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   372 ;;      Params:         4       0       0       0       0       0       0       0       0
   373 ;;      Locals:         2       0       0       0       0       0       0       0       0
   374 ;;      Temps:          0       0       0       0       0       0       0       0       0
   375 ;;      Totals:         6       0       0       0       0       0       0       0       0
   376 ;;Total ram usage:        6 bytes
   377 ;; Hardware stack levels used:    1
   378 ;; This function calls:
   379 ;;		Nothing
   380 ;; This function is called by:
   381 ;;		_setup
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           	psect	text2
   386  007CF6                     __ptext2:
   387                           	opt stack 0
   388  007CF6                     ___wmul:
   389                           	opt stack 29
   390                           
   391                           ;incstack = 0
   392  007CF6  5001               	movf	___wmul@multiplier,w,c
   393  007CF8  0203               	mulwf	___wmul@multiplicand,c
   394  007CFA  CFF3 F005          	movff	prodl,___wmul@product
   395  007CFE  CFF4 F006          	movff	prodh,___wmul@product+1
   396  007D02  5001               	movf	___wmul@multiplier,w,c
   397  007D04  0204               	mulwf	___wmul@multiplicand+1,c
   398  007D06  50F3               	movf	prodl,w,c
   399  007D08  2606               	addwf	___wmul@product+1,f,c
   400  007D0A  5002               	movf	___wmul@multiplier+1,w,c
   401  007D0C  0203               	mulwf	___wmul@multiplicand,c
   402  007D0E  50F3               	movf	prodl,w,c
   403  007D10  2606               	addwf	___wmul@product+1,f,c
   404  007D12  C005  F001         	movff	___wmul@product,?___wmul
   405  007D16  C006  F002         	movff	___wmul@product+1,?___wmul+1
   406  007D1A  0012               	return	
   407  007D1C                     __end_of___wmul:
   408                           	opt stack 0
   409                           tblptru	equ	0xFF8
   410                           tblptrh	equ	0xFF7
   411                           tblptrl	equ	0xFF6
   412                           tablat	equ	0xFF5
   413                           prodh	equ	0xFF4
   414                           prodl	equ	0xFF3
   415                           
   416 ;; *************** function _loop *****************
   417 ;; Defined at:
   418 ;;		line 21 in file "main.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;		None
   421 ;; Auto vars:     Size  Location     Type
   422 ;;		None
   423 ;; Return value:  Size  Location     Type
   424 ;;                  1    wreg      void 
   425 ;; Registers used:
   426 ;;		wreg, status,2, status,0, cstack
   427 ;; Tracked objects:
   428 ;;		On entry : 0/0
   429 ;;		On exit  : 0/0
   430 ;;		Unchanged: 0/0
   431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   432 ;;      Params:         0       0       0       0       0       0       0       0       0
   433 ;;      Locals:         4       0       0       0       0       0       0       0       0
   434 ;;      Temps:          0       0       0       0       0       0       0       0       0
   435 ;;      Totals:         4       0       0       0       0       0       0       0       0
   436 ;;Total ram usage:        4 bytes
   437 ;; Hardware stack levels used:    1
   438 ;; Hardware stack levels required when called:    1
   439 ;; This function calls:
   440 ;;		___lwdiv
   441 ;;		___lwmod
   442 ;;		_atraso_ms
   443 ;;		_display7s
   444 ;; This function is called by:
   445 ;;		_main
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           	psect	text3
   450  007ED2                     __ptext3:
   451                           	opt stack 0
   452  007ED2                     _loop:
   453                           	opt stack 29
   454                           
   455                           ;main.c: 22: PORTD=display7s(r/1000);
   456                           
   457                           ;incstack = 0
   458  007ED2  C012  F007         	movff	_r,___lwdiv@dividend
   459  007ED6  C013  F008         	movff	_r+1,___lwdiv@dividend+1
   460  007EDA  0E03               	movlw	3
   461  007EDC  6E0A               	movwf	___lwdiv@divisor+1,c
   462  007EDE  0EE8               	movlw	232
   463  007EE0  6E09               	movwf	___lwdiv@divisor,c
   464  007EE2  ECEA  F03E         	call	___lwdiv	;wreg free
   465  007EE6  5007               	movf	?___lwdiv,w,c
   466  007EE8  EC13  F03F         	call	_display7s
   467  007EEC  6E83               	movwf	3971,c	;volatile
   468                           
   469                           ;main.c: 23: PORTAbits.RA2=1;
   470  007EEE  8480               	bsf	3968,2,c	;volatile
   471                           
   472                           ;main.c: 24: atraso_ms(3);
   473  007EF0  0E00               	movlw	0
   474  007EF2  6E02               	movwf	atraso_ms@valor+1,c
   475  007EF4  0E03               	movlw	3
   476  007EF6  6E01               	movwf	atraso_ms@valor,c
   477  007EF8  ECAB  F03E         	call	_atraso_ms	;wreg free
   478                           
   479                           ;main.c: 25: PORTAbits.RA2=0;
   480  007EFC  9480               	bcf	3968,2,c	;volatile
   481                           
   482                           ;main.c: 26: PORTD=display7s((r%1000)/100);
   483  007EFE  0E03               	movlw	3
   484  007F00  6E04               	movwf	___lwmod@divisor+1,c
   485  007F02  0EE8               	movlw	232
   486  007F04  6E03               	movwf	___lwmod@divisor,c
   487  007F06  C012  F001         	movff	_r,___lwmod@dividend
   488  007F0A  C013  F002         	movff	_r+1,___lwmod@dividend+1
   489  007F0E  ECC9  F03E         	call	___lwmod	;wreg free
   490  007F12  C001  F007         	movff	?___lwmod,___lwdiv@dividend
   491  007F16  C002  F008         	movff	?___lwmod+1,___lwdiv@dividend+1
   492  007F1A  0E00               	movlw	0
   493  007F1C  6E0A               	movwf	___lwdiv@divisor+1,c
   494  007F1E  0E64               	movlw	100
   495  007F20  6E09               	movwf	___lwdiv@divisor,c
   496  007F22  ECEA  F03E         	call	___lwdiv	;wreg free
   497  007F26  5007               	movf	?___lwdiv,w,c
   498  007F28  EC13  F03F         	call	_display7s
   499  007F2C  6E83               	movwf	3971,c	;volatile
   500                           
   501                           ;main.c: 27: PORTAbits.RA3=1;
   502  007F2E  8680               	bsf	3968,3,c	;volatile
   503                           
   504                           ;main.c: 28: atraso_ms(3);
   505  007F30  0E00               	movlw	0
   506  007F32  6E02               	movwf	atraso_ms@valor+1,c
   507  007F34  0E03               	movlw	3
   508  007F36  6E01               	movwf	atraso_ms@valor,c
   509  007F38  ECAB  F03E         	call	_atraso_ms	;wreg free
   510                           
   511                           ;main.c: 29: PORTAbits.RA3=0;
   512  007F3C  9680               	bcf	3968,3,c	;volatile
   513                           
   514                           ;main.c: 30: PORTD=display7s(((r%1000)%100)/10);
   515  007F3E  0E03               	movlw	3
   516  007F40  6E04               	movwf	___lwmod@divisor+1,c
   517  007F42  0EE8               	movlw	232
   518  007F44  6E03               	movwf	___lwmod@divisor,c
   519  007F46  C012  F001         	movff	_r,___lwmod@dividend
   520  007F4A  C013  F002         	movff	_r+1,___lwmod@dividend+1
   521  007F4E  ECC9  F03E         	call	___lwmod	;wreg free
   522  007F52  C001  F010         	movff	?___lwmod,_loop$645
   523  007F56  C002  F011         	movff	?___lwmod+1,_loop$645+1
   524                           
   525                           ;main.c: 30: PORTD=display7s(((r%1000)%100)/10);
   526  007F5A  0E00               	movlw	0
   527  007F5C  6E04               	movwf	___lwmod@divisor+1,c
   528  007F5E  0E64               	movlw	100
   529  007F60  6E03               	movwf	___lwmod@divisor,c
   530  007F62  C010  F001         	movff	_loop$645,___lwmod@dividend
   531  007F66  C011  F002         	movff	_loop$645+1,___lwmod@dividend+1
   532  007F6A  ECC9  F03E         	call	___lwmod	;wreg free
   533  007F6E  C001  F007         	movff	?___lwmod,___lwdiv@dividend
   534  007F72  C002  F008         	movff	?___lwmod+1,___lwdiv@dividend+1
   535  007F76  0E00               	movlw	0
   536  007F78  6E0A               	movwf	___lwdiv@divisor+1,c
   537  007F7A  0E0A               	movlw	10
   538  007F7C  6E09               	movwf	___lwdiv@divisor,c
   539  007F7E  ECEA  F03E         	call	___lwdiv	;wreg free
   540  007F82  5007               	movf	?___lwdiv,w,c
   541  007F84  EC13  F03F         	call	_display7s
   542  007F88  6E83               	movwf	3971,c	;volatile
   543                           
   544                           ;main.c: 31: PORTAbits.RA4=1;
   545  007F8A  8880               	bsf	3968,4,c	;volatile
   546                           
   547                           ;main.c: 32: atraso_ms(3);
   548  007F8C  0E00               	movlw	0
   549  007F8E  6E02               	movwf	atraso_ms@valor+1,c
   550  007F90  0E03               	movlw	3
   551  007F92  6E01               	movwf	atraso_ms@valor,c
   552  007F94  ECAB  F03E         	call	_atraso_ms	;wreg free
   553                           
   554                           ;main.c: 33: PORTAbits.RA4=0;
   555  007F98  9880               	bcf	3968,4,c	;volatile
   556                           
   557                           ;main.c: 34: PORTD=display7s(((r%1000)%100)%10);
   558  007F9A  0E03               	movlw	3
   559  007F9C  6E04               	movwf	___lwmod@divisor+1,c
   560  007F9E  0EE8               	movlw	232
   561  007FA0  6E03               	movwf	___lwmod@divisor,c
   562  007FA2  C012  F001         	movff	_r,___lwmod@dividend
   563  007FA6  C013  F002         	movff	_r+1,___lwmod@dividend+1
   564  007FAA  ECC9  F03E         	call	___lwmod	;wreg free
   565  007FAE  C001  F010         	movff	?___lwmod,_loop$645
   566  007FB2  C002  F011         	movff	?___lwmod+1,_loop$645+1
   567                           
   568                           ;main.c: 34: PORTD=display7s(((r%1000)%100)%10);
   569  007FB6  0E00               	movlw	0
   570  007FB8  6E04               	movwf	___lwmod@divisor+1,c
   571  007FBA  0E64               	movlw	100
   572  007FBC  6E03               	movwf	___lwmod@divisor,c
   573  007FBE  C010  F001         	movff	_loop$645,___lwmod@dividend
   574  007FC2  C011  F002         	movff	_loop$645+1,___lwmod@dividend+1
   575  007FC6  ECC9  F03E         	call	___lwmod	;wreg free
   576  007FCA  C001  F00E         	movff	?___lwmod,_loop$646
   577  007FCE  C002  F00F         	movff	?___lwmod+1,_loop$646+1
   578                           
   579                           ;main.c: 34: PORTD=display7s(((r%1000)%100)%10);
   580  007FD2  C00E  F001         	movff	_loop$646,___lwmod@dividend
   581  007FD6  C00F  F002         	movff	_loop$646+1,___lwmod@dividend+1
   582  007FDA  0E00               	movlw	0
   583  007FDC  6E04               	movwf	___lwmod@divisor+1,c
   584  007FDE  0E0A               	movlw	10
   585  007FE0  6E03               	movwf	___lwmod@divisor,c
   586  007FE2  ECC9  F03E         	call	___lwmod	;wreg free
   587  007FE6  5001               	movf	?___lwmod,w,c
   588  007FE8  EC13  F03F         	call	_display7s
   589  007FEC  6E83               	movwf	3971,c	;volatile
   590                           
   591                           ;main.c: 35: PORTAbits.RA5=1;
   592  007FEE  8A80               	bsf	3968,5,c	;volatile
   593                           
   594                           ;main.c: 36: atraso_ms(3);
   595  007FF0  0E00               	movlw	0
   596  007FF2  6E02               	movwf	atraso_ms@valor+1,c
   597  007FF4  0E03               	movlw	3
   598  007FF6  6E01               	movwf	atraso_ms@valor,c
   599  007FF8  ECAB  F03E         	call	_atraso_ms	;wreg free
   600                           
   601                           ;main.c: 37: PORTAbits.RA5=0;
   602  007FFC  9A80               	bcf	3968,5,c	;volatile
   603  007FFE  0012               	return		;funcret
   604  008000                     __end_of_loop:
   605                           	opt stack 0
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           prodh	equ	0xFF4
   611                           prodl	equ	0xFF3
   612                           
   613 ;; *************** function _display7s *****************
   614 ;; Defined at:
   615 ;;		line 27 in file "display7s.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;  v               1    wreg     unsigned char 
   618 ;; Auto vars:     Size  Location     Type
   619 ;;  v               1    0[COMRAM] unsigned char 
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      unsigned char 
   622 ;; Registers used:
   623 ;;		wreg, status,2, status,0
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   629 ;;      Params:         0       0       0       0       0       0       0       0       0
   630 ;;      Locals:         1       0       0       0       0       0       0       0       0
   631 ;;      Temps:          0       0       0       0       0       0       0       0       0
   632 ;;      Totals:         1       0       0       0       0       0       0       0       0
   633 ;;Total ram usage:        1 bytes
   634 ;; Hardware stack levels used:    1
   635 ;; This function calls:
   636 ;;		Nothing
   637 ;; This function is called by:
   638 ;;		_loop
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           	psect	text4
   643  007E26                     __ptext4:
   644                           	opt stack 0
   645  007E26                     _display7s:
   646                           	opt stack 29
   647                           
   648                           ;incstack = 0
   649                           ;display7s@v stored from wreg
   650  007E26  6E01               	movwf	display7s@v,c
   651                           
   652                           ;display7s.c: 29: switch(v)
   653  007E28  D022               	goto	l900
   654  007E2A                     l830:
   655                           
   656                           ;display7s.c: 32: return 0x3F;
   657  007E2A  0E3F               	movlw	63
   658  007E2C  0012               	return	
   659  007E2E                     l834:
   660                           
   661                           ;display7s.c: 34: return 0x06;
   662  007E2E  0E06               	movlw	6
   663  007E30  0012               	return	
   664  007E32                     l838:
   665                           
   666                           ;display7s.c: 36: return 0x5B;
   667  007E32  0E5B               	movlw	91
   668  007E34  0012               	return	
   669  007E36                     l842:
   670                           
   671                           ;display7s.c: 38: return 0x4F;
   672  007E36  0E4F               	movlw	79
   673  007E38  0012               	return	
   674  007E3A                     l846:
   675                           
   676                           ;display7s.c: 40: return 0x66;
   677  007E3A  0E66               	movlw	102
   678  007E3C  0012               	return	
   679  007E3E                     l850:
   680                           
   681                           ;display7s.c: 42: return 0x6D;
   682  007E3E  0E6D               	movlw	109
   683  007E40  0012               	return	
   684  007E42                     l854:
   685                           
   686                           ;display7s.c: 44: return 0x7D;
   687  007E42  0E7D               	movlw	125
   688  007E44  0012               	return	
   689  007E46                     l858:
   690                           
   691                           ;display7s.c: 46: return 0x07;
   692  007E46  0E07               	movlw	7
   693  007E48  0012               	return	
   694  007E4A                     l862:
   695                           
   696                           ;display7s.c: 48: return 0x7F;
   697  007E4A  0E7F               	movlw	127
   698  007E4C  0012               	return	
   699  007E4E                     l866:
   700                           
   701                           ;display7s.c: 50: return 0x6F;
   702  007E4E  0E6F               	movlw	111
   703  007E50  0012               	return	
   704  007E52                     l870:
   705                           
   706                           ;display7s.c: 52: return 0x77;
   707  007E52  0E77               	movlw	119
   708  007E54  0012               	return	
   709  007E56                     l874:
   710                           
   711                           ;display7s.c: 54: return 0x7c;
   712  007E56  0E7C               	movlw	124
   713  007E58  0012               	return	
   714  007E5A                     l878:
   715                           
   716                           ;display7s.c: 56: return 0x58;
   717  007E5A  0E58               	movlw	88
   718  007E5C  0012               	return	
   719  007E5E                     l882:
   720                           
   721                           ;display7s.c: 58: return 0x5E;
   722  007E5E  0E5E               	movlw	94
   723  007E60  0012               	return	
   724  007E62                     l886:
   725                           
   726                           ;display7s.c: 60: return 0x79;
   727  007E62  0E79               	movlw	121
   728  007E64  0012               	return	
   729  007E66                     l890:
   730                           
   731                           ;display7s.c: 62: return 0x71;
   732  007E66  0E71               	movlw	113
   733  007E68  0012               	return	
   734  007E6A                     l894:
   735                           
   736                           ;display7s.c: 64: return 0;
   737  007E6A  0E00               	movlw	0
   738                           
   739                           ;display7s.c: 65: }
   740  007E6C  0012               	return	
   741  007E6E                     l900:
   742  007E6E  5001               	movf	display7s@v,w,c
   743                           
   744                           ; Switch size 1, requested type "space"
   745                           ; Number of cases is 16, Range of values is 0 to 15
   746                           ; switch strategies available:
   747                           ; Name         Instructions Cycles
   748                           ; simple_byte           49    25 (average)
   749                           ;	Chosen strategy is simple_byte
   750  007E70  0A00               	xorlw	0	; case 0
   751  007E72  B4D8               	btfsc	status,2,c
   752  007E74  D7DA               	goto	l830
   753  007E76  0A01               	xorlw	1	; case 1
   754  007E78  B4D8               	btfsc	status,2,c
   755  007E7A  D7D9               	goto	l834
   756  007E7C  0A03               	xorlw	3	; case 2
   757  007E7E  B4D8               	btfsc	status,2,c
   758  007E80  D7D8               	goto	l838
   759  007E82  0A01               	xorlw	1	; case 3
   760  007E84  B4D8               	btfsc	status,2,c
   761  007E86  D7D7               	goto	l842
   762  007E88  0A07               	xorlw	7	; case 4
   763  007E8A  B4D8               	btfsc	status,2,c
   764  007E8C  D7D6               	goto	l846
   765  007E8E  0A01               	xorlw	1	; case 5
   766  007E90  B4D8               	btfsc	status,2,c
   767  007E92  D7D5               	goto	l850
   768  007E94  0A03               	xorlw	3	; case 6
   769  007E96  B4D8               	btfsc	status,2,c
   770  007E98  D7D4               	goto	l854
   771  007E9A  0A01               	xorlw	1	; case 7
   772  007E9C  B4D8               	btfsc	status,2,c
   773  007E9E  D7D3               	goto	l858
   774  007EA0  0A0F               	xorlw	15	; case 8
   775  007EA2  B4D8               	btfsc	status,2,c
   776  007EA4  D7D2               	goto	l862
   777  007EA6  0A01               	xorlw	1	; case 9
   778  007EA8  B4D8               	btfsc	status,2,c
   779  007EAA  D7D1               	goto	l866
   780  007EAC  0A03               	xorlw	3	; case 10
   781  007EAE  B4D8               	btfsc	status,2,c
   782  007EB0  D7D0               	goto	l870
   783  007EB2  0A01               	xorlw	1	; case 11
   784  007EB4  B4D8               	btfsc	status,2,c
   785  007EB6  D7CF               	goto	l874
   786  007EB8  0A07               	xorlw	7	; case 12
   787  007EBA  B4D8               	btfsc	status,2,c
   788  007EBC  D7CE               	goto	l878
   789  007EBE  0A01               	xorlw	1	; case 13
   790  007EC0  B4D8               	btfsc	status,2,c
   791  007EC2  D7CD               	goto	l882
   792  007EC4  0A03               	xorlw	3	; case 14
   793  007EC6  B4D8               	btfsc	status,2,c
   794  007EC8  D7CC               	goto	l886
   795  007ECA  0A01               	xorlw	1	; case 15
   796  007ECC  B4D8               	btfsc	status,2,c
   797  007ECE  D7CB               	goto	l890
   798  007ED0  D7CC               	goto	l894
   799  007ED2                     __end_of_display7s:
   800                           	opt stack 0
   801                           tblptru	equ	0xFF8
   802                           tblptrh	equ	0xFF7
   803                           tblptrl	equ	0xFF6
   804                           tablat	equ	0xFF5
   805                           prodh	equ	0xFF4
   806                           prodl	equ	0xFF3
   807                           status	equ	0xFD8
   808                           
   809 ;; *************** function _atraso_ms *****************
   810 ;; Defined at:
   811 ;;		line 29 in file "atraso.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;  valor           2    0[COMRAM] unsigned int 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  i               2    2[COMRAM] unsigned int 
   816 ;;  j2              1    5[COMRAM] volatile unsigned char 
   817 ;;  j1              1    4[COMRAM] volatile unsigned char 
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   827 ;;      Params:         2       0       0       0       0       0       0       0       0
   828 ;;      Locals:         4       0       0       0       0       0       0       0       0
   829 ;;      Temps:          0       0       0       0       0       0       0       0       0
   830 ;;      Totals:         6       0       0       0       0       0       0       0       0
   831 ;;Total ram usage:        6 bytes
   832 ;; Hardware stack levels used:    1
   833 ;; This function calls:
   834 ;;		Nothing
   835 ;; This function is called by:
   836 ;;		_loop
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text5
   841  007D56                     __ptext5:
   842                           	opt stack 0
   843  007D56                     _atraso_ms:
   844                           	opt stack 29
   845                           
   846                           ;atraso.c: 31: unsigned int i;
   847                           ;atraso.c: 32: volatile unsigned char j1;
   848                           ;atraso.c: 33: volatile unsigned char j2=0;
   849                           
   850                           ;incstack = 0
   851  007D56  0E00               	movlw	0
   852  007D58  6E06               	movwf	atraso_ms@j2,c	;volatile
   853                           
   854                           ;atraso.c: 35: for (i =0; i< valor; i++)
   855  007D5A  0E00               	movlw	0
   856  007D5C  6E04               	movwf	atraso_ms@i+1,c
   857  007D5E  0E00               	movlw	0
   858  007D60  6E03               	movwf	atraso_ms@i,c
   859  007D62  D010               	goto	l826
   860  007D64                     l822:
   861                           
   862                           ;atraso.c: 36: {
   863                           ;atraso.c: 37: j1=(8000000/(4000l*50));
   864  007D64  0E28               	movlw	40
   865  007D66  6E05               	movwf	atraso_ms@j1,c	;volatile
   866  007D68                     l1:
   867  007D68  0E09               	movlw	9	; 20 j1 ;# 
   868  007D6A  6F06               	movwf	atraso_ms@j2,b	; 20 j1 ;# 
   869  007D6C  F000               	nop		; 180 j2j1 ;# 
   870  007D6E  F000               	nop		; 180 j2j1 ;# 
   871  007D70  2F06               	decfsz	atraso_ms@j2,f,b	; 160 j2j1 -j1 ;# 
   872                           
   873                           ; 40 2j1 ;# 
   874  007D72  EFB7  F03E         	goto	($+-3)	; 320 2j2j1 -2j1 ;# 
   875  007D76  F000               	nop		; 20 j1 ;# 
   876  007D78  2F05               	decfsz	atraso_ms@j1,f,b	; 19 j1 -1 ;# 
   877                           
   878                           ; 2 2 ;# 
   879  007D7A  EFB4  F03E         	goto	l1	; 38 2j1 -2 ;# 
   880  007D7E  F000               	nop		; 1 1 ;# 
   881  007D80  4A03               	infsnz	atraso_ms@i,f,c
   882  007D82  2A04               	incf	atraso_ms@i+1,f,c
   883  007D84                     l826:
   884  007D84  5001               	movf	atraso_ms@valor,w,c
   885  007D86  5C03               	subwf	atraso_ms@i,w,c
   886  007D88  5002               	movf	atraso_ms@valor+1,w,c
   887  007D8A  5804               	subwfb	atraso_ms@i+1,w,c
   888  007D8C  B0D8               	btfsc	status,0,c
   889  007D8E  0012               	return	
   890  007D90  D7E9               	goto	l822
   891  007D92                     __end_of_atraso_ms:
   892                           	opt stack 0
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           prodh	equ	0xFF4
   898                           prodl	equ	0xFF3
   899                           status	equ	0xFD8
   900                           
   901 ;; *************** function ___lwmod *****************
   902 ;; Defined at:
   903 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
   904 ;; Parameters:    Size  Location     Type
   905 ;;  dividend        2    0[COMRAM] unsigned int 
   906 ;;  divisor         2    2[COMRAM] unsigned int 
   907 ;; Auto vars:     Size  Location     Type
   908 ;;  counter         1    4[COMRAM] unsigned char 
   909 ;; Return value:  Size  Location     Type
   910 ;;                  2    0[COMRAM] unsigned int 
   911 ;; Registers used:
   912 ;;		wreg, status,2, status,0
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   918 ;;      Params:         4       0       0       0       0       0       0       0       0
   919 ;;      Locals:         1       0       0       0       0       0       0       0       0
   920 ;;      Temps:          0       0       0       0       0       0       0       0       0
   921 ;;      Totals:         5       0       0       0       0       0       0       0       0
   922 ;;Total ram usage:        5 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; This function calls:
   925 ;;		Nothing
   926 ;; This function is called by:
   927 ;;		_loop
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           	psect	text6
   932  007D92                     __ptext6:
   933                           	opt stack 0
   934  007D92                     ___lwmod:
   935                           	opt stack 29
   936                           
   937                           ;incstack = 0
   938  007D92  5003               	movf	___lwmod@divisor,w,c
   939  007D94  1004               	iorwf	___lwmod@divisor+1,w,c
   940  007D96  B4D8               	btfsc	status,2,c
   941  007D98  D018               	goto	l481
   942  007D9A  0E01               	movlw	1
   943  007D9C  6E05               	movwf	___lwmod@counter,c
   944  007D9E  D004               	goto	l936
   945  007DA0                     l934:
   946  007DA0  90D8               	bcf	status,0,c
   947  007DA2  3603               	rlcf	___lwmod@divisor,f,c
   948  007DA4  3604               	rlcf	___lwmod@divisor+1,f,c
   949  007DA6  2A05               	incf	___lwmod@counter,f,c
   950  007DA8                     l936:
   951  007DA8  AE04               	btfss	___lwmod@divisor+1,7,c
   952  007DAA  D7FA               	goto	l934
   953  007DAC                     l938:
   954  007DAC  5003               	movf	___lwmod@divisor,w,c
   955  007DAE  5C01               	subwf	___lwmod@dividend,w,c
   956  007DB0  5004               	movf	___lwmod@divisor+1,w,c
   957  007DB2  5802               	subwfb	___lwmod@dividend+1,w,c
   958  007DB4  A0D8               	btfss	status,0,c
   959  007DB6  D004               	goto	l942
   960  007DB8  5003               	movf	___lwmod@divisor,w,c
   961  007DBA  5E01               	subwf	___lwmod@dividend,f,c
   962  007DBC  5004               	movf	___lwmod@divisor+1,w,c
   963  007DBE  5A02               	subwfb	___lwmod@dividend+1,f,c
   964  007DC0                     l942:
   965  007DC0  90D8               	bcf	status,0,c
   966  007DC2  3204               	rrcf	___lwmod@divisor+1,f,c
   967  007DC4  3203               	rrcf	___lwmod@divisor,f,c
   968  007DC6  2E05               	decfsz	___lwmod@counter,f,c
   969  007DC8  D7F1               	goto	l938
   970  007DCA                     l481:
   971  007DCA  C001  F001         	movff	___lwmod@dividend,?___lwmod
   972  007DCE  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   973  007DD2  0012               	return		;funcret
   974  007DD4                     __end_of___lwmod:
   975                           	opt stack 0
   976                           tblptru	equ	0xFF8
   977                           tblptrh	equ	0xFF7
   978                           tblptrl	equ	0xFF6
   979                           tablat	equ	0xFF5
   980                           prodh	equ	0xFF4
   981                           prodl	equ	0xFF3
   982                           status	equ	0xFD8
   983                           
   984 ;; *************** function ___lwdiv *****************
   985 ;; Defined at:
   986 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;  dividend        2    6[COMRAM] unsigned int 
   989 ;;  divisor         2    8[COMRAM] unsigned int 
   990 ;; Auto vars:     Size  Location     Type
   991 ;;  quotient        2   10[COMRAM] unsigned int 
   992 ;;  counter         1   12[COMRAM] unsigned char 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  2    6[COMRAM] unsigned int 
   995 ;; Registers used:
   996 ;;		wreg, status,2, status,0
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1002 ;;      Params:         4       0       0       0       0       0       0       0       0
  1003 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1005 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1006 ;;Total ram usage:        7 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_setup
  1012 ;;		_loop
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text7
  1017  007DD4                     __ptext7:
  1018                           	opt stack 0
  1019  007DD4                     ___lwdiv:
  1020                           	opt stack 29
  1021                           
  1022                           ;incstack = 0
  1023  007DD4  0E00               	movlw	0
  1024  007DD6  6E0C               	movwf	___lwdiv@quotient+1,c
  1025  007DD8  0E00               	movlw	0
  1026  007DDA  6E0B               	movwf	___lwdiv@quotient,c
  1027  007DDC  5009               	movf	___lwdiv@divisor,w,c
  1028  007DDE  100A               	iorwf	___lwdiv@divisor+1,w,c
  1029  007DE0  B4D8               	btfsc	status,2,c
  1030  007DE2  D01C               	goto	l471
  1031  007DE4  0E01               	movlw	1
  1032  007DE6  6E0D               	movwf	___lwdiv@counter,c
  1033  007DE8  D004               	goto	l916
  1034  007DEA                     l914:
  1035  007DEA  90D8               	bcf	status,0,c
  1036  007DEC  3609               	rlcf	___lwdiv@divisor,f,c
  1037  007DEE  360A               	rlcf	___lwdiv@divisor+1,f,c
  1038  007DF0  2A0D               	incf	___lwdiv@counter,f,c
  1039  007DF2                     l916:
  1040  007DF2  AE0A               	btfss	___lwdiv@divisor+1,7,c
  1041  007DF4  D7FA               	goto	l914
  1042  007DF6                     l918:
  1043  007DF6  90D8               	bcf	status,0,c
  1044  007DF8  360B               	rlcf	___lwdiv@quotient,f,c
  1045  007DFA  360C               	rlcf	___lwdiv@quotient+1,f,c
  1046  007DFC  5009               	movf	___lwdiv@divisor,w,c
  1047  007DFE  5C07               	subwf	___lwdiv@dividend,w,c
  1048  007E00  500A               	movf	___lwdiv@divisor+1,w,c
  1049  007E02  5808               	subwfb	___lwdiv@dividend+1,w,c
  1050  007E04  A0D8               	btfss	status,0,c
  1051  007E06  D005               	goto	l926
  1052  007E08  5009               	movf	___lwdiv@divisor,w,c
  1053  007E0A  5E07               	subwf	___lwdiv@dividend,f,c
  1054  007E0C  500A               	movf	___lwdiv@divisor+1,w,c
  1055  007E0E  5A08               	subwfb	___lwdiv@dividend+1,f,c
  1056  007E10  800B               	bsf	___lwdiv@quotient,0,c
  1057  007E12                     l926:
  1058  007E12  90D8               	bcf	status,0,c
  1059  007E14  320A               	rrcf	___lwdiv@divisor+1,f,c
  1060  007E16  3209               	rrcf	___lwdiv@divisor,f,c
  1061  007E18  2E0D               	decfsz	___lwdiv@counter,f,c
  1062  007E1A  D7ED               	goto	l918
  1063  007E1C                     l471:
  1064  007E1C  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1065  007E20  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1066  007E24  0012               	return		;funcret
  1067  007E26                     __end_of___lwdiv:
  1068                           	opt stack 0
  1069  0000                     tblptru	equ	0xFF8
  1070                           tblptrh	equ	0xFF7
  1071                           tblptrl	equ	0xFF6
  1072                           tablat	equ	0xFF5
  1073                           prodh	equ	0xFF4
  1074                           prodl	equ	0xFF3
  1075                           status	equ	0xFD8
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           prodh	equ	0xFF4
  1081                           prodl	equ	0xFF3
  1082                           status	equ	0xFD8
  1083                           
  1084                           	psect	rparam
  1085  0000                     tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           prodh	equ	0xFF4
  1090                           prodl	equ	0xFF3
  1091                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      21
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_loop
    _setup->___lwdiv
    _loop->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2289
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     751
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     245
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _loop                                                 6     6      0    1538
                                             13 COMRAM     4     4      0
                            ___lwdiv
                            ___lwmod
                          _atraso_ms
                          _display7s
 ---------------------------------------------------------------------------------
 (2) _display7s                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _atraso_ms                                            6     4      2     220
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     675
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     506
                                              6 COMRAM     7     3      4
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___lwdiv
       ___lwmod (ARG)
       ___wmul (ARG)
     ___lwmod
     _atraso_ms
     _display7s
   _setup
     ___lwdiv
       ___lwmod (ARG)
       ___wmul (ARG)
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     11      15       1       22.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      15      20        0.0%
DATA                 0      0      15       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Apr 02 16:51:23 2017

                      l1 7D68                        _n 0014                        _r 0012  
    ___wmul@multiplicand 0003              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l471 7E1C                      l481 7DCA                      l900 7E6E  
                    l822 7D64                      l830 7E2A                      l914 7DEA  
                    l826 7D84                      l850 7E3E                      l842 7E36  
                    l834 7E2E                      l916 7DF2                      l926 7E12  
                    l918 7DF6                      l942 7DC0                      l934 7DA0  
                    l870 7E52                      l862 7E4A                      l854 7E42  
                    l846 7E3A                      l838 7E32                      l936 7DA8  
                    l938 7DAC                      l890 7E66                      l882 7E5E  
                    l874 7E56                      l866 7E4E                      l858 7E46  
                    l972 7CCE                      l894 7E6A                      l886 7E62  
                    l878 7E5A             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
           __CFG_BOR$OFF 000000             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     _main 7CB2                     _loop 7ED2  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
          __CFG_PLLDIV$2 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  ?_loop 0001              atraso_ms@j1 0005              atraso_ms@j2 0006  
        __end_of___lwdiv 7E26          __end_of___lwmod 7DD4                    _PORTD 000F83  
          __CFG_USBDIV$2 000000                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _setup 7D1C  
                  tablat 000FF5                    status 000FD8           __CFG_ICPRT$OFF 000000  
        __initialization 7CD4             __end_of_main 7CD4             __end_of_loop 8000  
                 ??_main 0012                   ??_loop 000E            __activetblptr 000002  
                 _ADCON1 000FC1                   ?_setup 0001           __CFG_XINST$OFF 000000  
                 ___wmul 7CF6                ??___lwdiv 000B                ??___lwmod 0005  
           __pdataCOMRAM 0014                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 7CEC  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_setup 7D56       __size_of_display7s 00AC                  ??_setup 000E  
     __size_of_atraso_ms 003C               __pnvCOMRAM 0012                  ?___wmul 0001  
        __CFG_VREGEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
      __end_of_display7s 7ED2          __size_of___wmul 0026                  ___lwdiv 7DD4  
                ___lwmod 7D92        __end_of_atraso_ms 7D92          __CFG_STVREN$OFF 000000  
                __pcinit 7CD4                  __ramtop 0800                  __ptext0 7CB2  
                __ptext1 7D1C                  __ptext2 7CF6                  __ptext3 7ED2  
                __ptext4 7E26                  __ptext5 7D56                  __ptext6 7D92  
                __ptext7 7DD4     end_of_initialization 7CEC            __Lmediumconst 0000  
              _PORTAbits 000F80               display7s@v 0001               atraso_ms@i 0003  
         __end_of___wmul 7D1C            __pidataCOMRAM 7CB0      start_initialization 7CD4  
               ??___wmul 0005         __CFG_LPT1OSC$OFF 000000         ___lwdiv@dividend 0007  
               ?___lwdiv 0007                 ?___lwmod 0001                _display7s 7E26  
              _atraso_ms 7D56         ___lwdiv@quotient 000B           __size_of_setup 003A  
         atraso_ms@valor 0001           ___wmul@product 0005         __CFG_WDTPS$32768 000000  
             ?_display7s 0001        ___wmul@multiplier 0001               ?_atraso_ms 0001  
               __Hrparam 0000                 __Lrparam 0000         __size_of___lwdiv 0052  
       __size_of___lwmod 0042          ___lwdiv@divisor 0009          ___lwdiv@counter 000D  
               _loop$645 0010                 _loop$646 000E            __size_of_main 0022  
          __size_of_loop 012E              ??_display7s 0001    __CFG_CPUDIV$OSC1_PLL2 000000  
            ??_atraso_ms 0003         ___lwmod@dividend 0001          ___lwmod@divisor 0003  
        ___lwmod@counter 0005  
