

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Apr 26 19:56:03 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.41
    21                           ; Generated 25/01/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	idataCOMRAM
    56  007C55                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _chamada
    60  007C55  0A                 	db	10
    61  0000                     _PORTBbits	set	3969
    62  0000                     _PORTAbits	set	3968
    63  0000                     _PORTD	set	3971
    64  0000                     _PORTA	set	3968
    65  0000                     _PORTB	set	3969
    66  0000                     _TRISAbits	set	3986
    67  0000                     _TRISE	set	3990
    68  0000                     _TRISD	set	3989
    69  0000                     _TRISC	set	3988
    70  0000                     _TRISB	set	3987
    71  0000                     _TRISA	set	3986
    72  0000                     _ADCON1	set	4033
    73                           
    74                           ; #config settings
    75  0000                     
    76                           	psect	cinit
    77  007C8E                     __pcinit:
    78                           	opt stack 0
    79  007C8E                     start_initialization:
    80                           	opt stack 0
    81  007C8E                     __initialization:
    82                           	opt stack 0
    83                           
    84                           ; Initialize objects allocated to COMRAM (1 bytes)
    85                           ; load TBLPTR registers with __pidataCOMRAM
    86  007C8E  0E55               	movlw	low __pidataCOMRAM
    87  007C90  6EF6               	movwf	tblptrl,c
    88  007C92  0E7C               	movlw	high __pidataCOMRAM
    89  007C94  6EF7               	movwf	tblptrh,c
    90  007C96  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    91  007C98  6EF8               	movwf	tblptru,c
    92  007C9A  0009               	tblrd		*+	;fetch initializer
    93  007C9C  CFF5 F015          	movff	tablat,__pdataCOMRAM
    94                           
    95                           ; Clear objects allocated to COMRAM (6 bytes)
    96  007CA0  6A14               	clrf	(__pbssCOMRAM+5)& (0+255),c
    97  007CA2  6A13               	clrf	(__pbssCOMRAM+4)& (0+255),c
    98  007CA4  6A12               	clrf	(__pbssCOMRAM+3)& (0+255),c
    99  007CA6  6A11               	clrf	(__pbssCOMRAM+2)& (0+255),c
   100  007CA8  6A10               	clrf	(__pbssCOMRAM+1)& (0+255),c
   101  007CAA  6A0F               	clrf	__pbssCOMRAM& (0+255),c
   102  007CAC                     end_of_initialization:
   103                           	opt stack 0
   104  007CAC                     __end_of__initialization:
   105                           	opt stack 0
   106  007CAC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   107  007CAE  6EF8               	movwf	tblptru,c
   108  007CB0  0100               	movlb	0
   109  007CB2  EF36  F03E         	goto	_main	;jump to C main() function
   110                           tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           
   115                           	psect	bssCOMRAM
   116  00000F                     __pbssCOMRAM:
   117                           	opt stack 0
   118  00000F                     _aux2:
   119                           	opt stack 0
   120  00000F                     	ds	2
   121  000011                     _aux1:
   122                           	opt stack 0
   123  000011                     	ds	2
   124  000013                     _seg:
   125                           	opt stack 0
   126  000013                     	ds	1
   127  000014                     _a:
   128                           	opt stack 0
   129  000014                     	ds	1
   130                           tblptru	equ	0xFF8
   131                           tblptrh	equ	0xFF7
   132                           tblptrl	equ	0xFF6
   133                           tablat	equ	0xFF5
   134                           
   135                           	psect	dataCOMRAM
   136  000015                     __pdataCOMRAM:
   137                           	opt stack 0
   138  000015                     _chamada:
   139                           	opt stack 0
   140  000015                     	ds	1
   141                           tblptru	equ	0xFF8
   142                           tblptrh	equ	0xFF7
   143                           tblptrl	equ	0xFF6
   144                           tablat	equ	0xFF5
   145                           
   146                           	psect	cstackCOMRAM
   147  000001                     __pcstackCOMRAM:
   148                           	opt stack 0
   149  000001                     ?___awdiv:
   150                           	opt stack 0
   151  000001                     ?___aldiv:
   152                           	opt stack 0
   153  000001                     display7s@v:
   154                           	opt stack 0
   155  000001                     atraso_ms@valor:
   156                           	opt stack 0
   157  000001                     ___awdiv@dividend:
   158                           	opt stack 0
   159  000001                     ___aldiv@dividend:
   160                           	opt stack 0
   161                           
   162                           ; 4 bytes @ 0x0
   163  000001                     	ds	2
   164  000003                     atraso_ms@i:
   165                           	opt stack 0
   166  000003                     ___awdiv@divisor:
   167                           	opt stack 0
   168                           
   169                           ; 2 bytes @ 0x2
   170  000003                     	ds	2
   171  000005                     atraso_ms@j1:
   172                           	opt stack 0
   173  000005                     ___awdiv@counter:
   174                           	opt stack 0
   175  000005                     ___aldiv@divisor:
   176                           	opt stack 0
   177                           
   178                           ; 4 bytes @ 0x4
   179  000005                     	ds	1
   180  000006                     atraso_ms@j2:
   181                           	opt stack 0
   182  000006                     ___awdiv@sign:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x5
   186  000006                     	ds	1
   187  000007                     ___awdiv@quotient:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0x6
   191  000007                     	ds	2
   192  000009                     ___aldiv@counter:
   193                           	opt stack 0
   194                           
   195                           ; 1 bytes @ 0x8
   196  000009                     	ds	1
   197  00000A                     ___aldiv@sign:
   198                           	opt stack 0
   199                           
   200                           ; 1 bytes @ 0x9
   201  00000A                     	ds	1
   202  00000B                     ___aldiv@quotient:
   203                           	opt stack 0
   204                           
   205                           ; 4 bytes @ 0xA
   206  00000B                     	ds	4
   207  00000F                     tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           
   212                           ; 1 bytes @ 0xE
   213 ;;
   214 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   215 ;;
   216 ;; *************** function _main *****************
   217 ;; Defined at:
   218 ;;		line 80 in file "config.c"
   219 ;; Parameters:    Size  Location     Type
   220 ;;		None
   221 ;; Auto vars:     Size  Location     Type
   222 ;;		None
   223 ;; Return value:  Size  Location     Type
   224 ;;                  1    wreg      void 
   225 ;; Registers used:
   226 ;;		wreg, status,2, status,0, cstack
   227 ;; Tracked objects:
   228 ;;		On entry : 0/0
   229 ;;		On exit  : 0/0
   230 ;;		Unchanged: 0/0
   231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   232 ;;      Params:         0       0       0       0       0       0       0       0       0
   233 ;;      Locals:         0       0       0       0       0       0       0       0       0
   234 ;;      Temps:          0       0       0       0       0       0       0       0       0
   235 ;;      Totals:         0       0       0       0       0       0       0       0       0
   236 ;;Total ram usage:        0 bytes
   237 ;; Hardware stack levels required when called:    2
   238 ;; This function calls:
   239 ;;		_loop
   240 ;;		_setup
   241 ;; This function is called by:
   242 ;;		Startup code after reset
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246                           	psect	text0
   247  007C6C                     __ptext0:
   248                           	opt stack 0
   249  007C6C                     _main:
   250                           	opt stack 29
   251                           
   252                           ;config.c: 82: ADCON1=0x0C;
   253                           
   254                           ;incstack = 0
   255  007C6C  0E0C               	movlw	12
   256  007C6E  6EC1               	movwf	4033,c	;volatile
   257                           
   258                           ;config.c: 83: TRISA = 0XC7;
   259  007C70  0EC7               	movlw	199
   260  007C72  6E92               	movwf	3986,c	;volatile
   261                           
   262                           ;config.c: 84: TRISB = 0X07;
   263  007C74  0E07               	movlw	7
   264  007C76  6E93               	movwf	3987,c	;volatile
   265                           
   266                           ;config.c: 85: TRISC = 0X01;
   267  007C78  0E01               	movlw	1
   268  007C7A  6E94               	movwf	3988,c	;volatile
   269                           
   270                           ;config.c: 86: TRISD = 0X00;
   271  007C7C  0E00               	movlw	0
   272  007C7E  6E95               	movwf	3989,c	;volatile
   273                           
   274                           ;config.c: 87: TRISE = 0X00;
   275  007C80  0E00               	movlw	0
   276  007C82  6E96               	movwf	3990,c	;volatile
   277                           
   278                           ;config.c: 88: setup();
   279  007C84  EC2B  F03E         	call	_setup	;wreg free
   280  007C88                     l1076:
   281                           
   282                           ;config.c: 90: {
   283                           ;config.c: 91: loop();
   284  007C88  EC77  F03F         	call	_loop	;wreg free
   285  007C8C  D7FD               	goto	l1076
   286  007C8E                     __end_of_main:
   287                           	opt stack 0
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           
   293 ;; *************** function _setup *****************
   294 ;; Defined at:
   295 ;;		line 14 in file "exerc1.c"
   296 ;; Parameters:    Size  Location     Type
   297 ;;		None
   298 ;; Auto vars:     Size  Location     Type
   299 ;;		None
   300 ;; Return value:  Size  Location     Type
   301 ;;                  1    wreg      void 
   302 ;; Registers used:
   303 ;;		wreg, status,2
   304 ;; Tracked objects:
   305 ;;		On entry : 0/0
   306 ;;		On exit  : 0/0
   307 ;;		Unchanged: 0/0
   308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   309 ;;      Params:         0       0       0       0       0       0       0       0       0
   310 ;;      Locals:         0       0       0       0       0       0       0       0       0
   311 ;;      Temps:          0       0       0       0       0       0       0       0       0
   312 ;;      Totals:         0       0       0       0       0       0       0       0       0
   313 ;;Total ram usage:        0 bytes
   314 ;; Hardware stack levels used:    1
   315 ;; This function calls:
   316 ;;		Nothing
   317 ;; This function is called by:
   318 ;;		_main
   319 ;; This function uses a non-reentrant model
   320 ;;
   321                           
   322                           	psect	text1
   323  007C56                     __ptext1:
   324                           	opt stack 0
   325  007C56                     _setup:
   326                           	opt stack 30
   327                           
   328                           ;exerc1.c: 15: TRISD=0x00;
   329                           
   330                           ;incstack = 0
   331  007C56  0E00               	movlw	0
   332  007C58  6E95               	movwf	3989,c	;volatile
   333                           
   334                           ;exerc1.c: 16: TRISAbits.RA2=0;
   335  007C5A  9492               	bcf	3986,2,c	;volatile
   336                           
   337                           ;exerc1.c: 17: TRISAbits.RA3=0;
   338  007C5C  9692               	bcf	3986,3,c	;volatile
   339                           
   340                           ;exerc1.c: 18: TRISAbits.RA4=0;
   341  007C5E  9892               	bcf	3986,4,c	;volatile
   342                           
   343                           ;exerc1.c: 19: TRISAbits.RA5=0;
   344  007C60  9A92               	bcf	3986,5,c	;volatile
   345                           
   346                           ;exerc1.c: 21: PORTB=0;
   347  007C62  0E00               	movlw	0
   348  007C64  6E81               	movwf	3969,c	;volatile
   349                           
   350                           ;exerc1.c: 22: PORTA=0;
   351  007C66  0E00               	movlw	0
   352  007C68  6E80               	movwf	3968,c	;volatile
   353  007C6A  0012               	return		;funcret
   354  007C6C                     __end_of_setup:
   355                           	opt stack 0
   356                           tblptru	equ	0xFF8
   357                           tblptrh	equ	0xFF7
   358                           tblptrl	equ	0xFF6
   359                           tablat	equ	0xFF5
   360                           
   361 ;; *************** function _loop *****************
   362 ;; Defined at:
   363 ;;		line 25 in file "exerc1.c"
   364 ;; Parameters:    Size  Location     Type
   365 ;;		None
   366 ;; Auto vars:     Size  Location     Type
   367 ;;		None
   368 ;; Return value:  Size  Location     Type
   369 ;;                  1    wreg      void 
   370 ;; Registers used:
   371 ;;		wreg, status,2, status,0, cstack
   372 ;; Tracked objects:
   373 ;;		On entry : 0/0
   374 ;;		On exit  : 0/0
   375 ;;		Unchanged: 0/0
   376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   377 ;;      Params:         0       0       0       0       0       0       0       0       0
   378 ;;      Locals:         0       0       0       0       0       0       0       0       0
   379 ;;      Temps:          0       0       0       0       0       0       0       0       0
   380 ;;      Totals:         0       0       0       0       0       0       0       0       0
   381 ;;Total ram usage:        0 bytes
   382 ;; Hardware stack levels used:    1
   383 ;; Hardware stack levels required when called:    1
   384 ;; This function calls:
   385 ;;		___aldiv
   386 ;;		___awdiv
   387 ;;		_atraso_ms
   388 ;;		_display7s
   389 ;; This function is called by:
   390 ;;		_main
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394                           	psect	text2
   395  007EEE                     __ptext2:
   396                           	opt stack 0
   397  007EEE                     _loop:
   398                           	opt stack 29
   399                           
   400                           ;exerc1.c: 26: PORTD=display7s((seg%65536)/4096);
   401                           
   402                           ;incstack = 0
   403  007EEE  5013               	movf	_seg,w,c
   404  007EF0  6E01               	movwf	___aldiv@dividend,c
   405  007EF2  6A02               	clrf	___aldiv@dividend+1,c
   406  007EF4  6A03               	clrf	___aldiv@dividend+2,c
   407  007EF6  6A04               	clrf	___aldiv@dividend+3,c
   408  007EF8  0E00               	movlw	0
   409  007EFA  6E05               	movwf	___aldiv@divisor,c
   410  007EFC  0E10               	movlw	16
   411  007EFE  6E06               	movwf	___aldiv@divisor+1,c
   412  007F00  0E00               	movlw	0
   413  007F02  6E07               	movwf	___aldiv@divisor+2,c
   414  007F04  0E00               	movlw	0
   415  007F06  6E08               	movwf	___aldiv@divisor+3,c
   416  007F08  EC11  F03F         	call	___aldiv	;wreg free
   417  007F0C  5001               	movf	?___aldiv,w,c
   418  007F0E  ECBB  F03E         	call	_display7s
   419  007F12  6E83               	movwf	3971,c	;volatile
   420                           
   421                           ;exerc1.c: 27: PORTAbits.RA2=1;
   422  007F14  8480               	bsf	3968,2,c	;volatile
   423                           
   424                           ;exerc1.c: 28: atraso_ms(3);
   425  007F16  0E00               	movlw	0
   426  007F18  6E02               	movwf	atraso_ms@valor+1,c
   427  007F1A  0E03               	movlw	3
   428  007F1C  6E01               	movwf	atraso_ms@valor,c
   429  007F1E  EC5B  F03E         	call	_atraso_ms	;wreg free
   430                           
   431                           ;exerc1.c: 29: PORTAbits.RA2=0;
   432  007F22  9480               	bcf	3968,2,c	;volatile
   433                           
   434                           ;exerc1.c: 30: PORTD=display7s((seg%4096)/256);
   435  007F24  C013  F001         	movff	_seg,___awdiv@dividend
   436  007F28  6A02               	clrf	___awdiv@dividend+1,c
   437  007F2A  0E01               	movlw	1
   438  007F2C  6E04               	movwf	___awdiv@divisor+1,c
   439  007F2E  0E00               	movlw	0
   440  007F30  6E03               	movwf	___awdiv@divisor,c
   441  007F32  EC79  F03E         	call	___awdiv	;wreg free
   442  007F36  5001               	movf	?___awdiv,w,c
   443  007F38  ECBB  F03E         	call	_display7s
   444  007F3C  6E83               	movwf	3971,c	;volatile
   445                           
   446                           ;exerc1.c: 31: PORTAbits.RA3=1;
   447  007F3E  8680               	bsf	3968,3,c	;volatile
   448                           
   449                           ;exerc1.c: 32: atraso_ms(3);
   450  007F40  0E00               	movlw	0
   451  007F42  6E02               	movwf	atraso_ms@valor+1,c
   452  007F44  0E03               	movlw	3
   453  007F46  6E01               	movwf	atraso_ms@valor,c
   454  007F48  EC5B  F03E         	call	_atraso_ms	;wreg free
   455                           
   456                           ;exerc1.c: 33: PORTAbits.RA3=0;
   457  007F4C  9680               	bcf	3968,3,c	;volatile
   458                           
   459                           ;exerc1.c: 34: PORTD=display7s((seg%256)/16);
   460  007F4E  C013  F001         	movff	_seg,___awdiv@dividend
   461  007F52  6A02               	clrf	___awdiv@dividend+1,c
   462  007F54  0E00               	movlw	0
   463  007F56  6E04               	movwf	___awdiv@divisor+1,c
   464  007F58  0E10               	movlw	16
   465  007F5A  6E03               	movwf	___awdiv@divisor,c
   466  007F5C  EC79  F03E         	call	___awdiv	;wreg free
   467  007F60  5001               	movf	?___awdiv,w,c
   468  007F62  ECBB  F03E         	call	_display7s
   469  007F66  6E83               	movwf	3971,c	;volatile
   470                           
   471                           ;exerc1.c: 35: PORTAbits.RA4=1;
   472  007F68  8880               	bsf	3968,4,c	;volatile
   473                           
   474                           ;exerc1.c: 36: atraso_ms(3);
   475  007F6A  0E00               	movlw	0
   476  007F6C  6E02               	movwf	atraso_ms@valor+1,c
   477  007F6E  0E03               	movlw	3
   478  007F70  6E01               	movwf	atraso_ms@valor,c
   479  007F72  EC5B  F03E         	call	_atraso_ms	;wreg free
   480                           
   481                           ;exerc1.c: 37: PORTAbits.RA4=0;
   482  007F76  9880               	bcf	3968,4,c	;volatile
   483                           
   484                           ;exerc1.c: 38: PORTD=display7s(seg%16);
   485  007F78  5013               	movf	_seg,w,c
   486  007F7A  0B0F               	andlw	15
   487  007F7C  ECBB  F03E         	call	_display7s
   488  007F80  6E83               	movwf	3971,c	;volatile
   489                           
   490                           ;exerc1.c: 39: PORTAbits.RA5=1;
   491  007F82  8A80               	bsf	3968,5,c	;volatile
   492                           
   493                           ;exerc1.c: 40: atraso_ms(3);
   494  007F84  0E00               	movlw	0
   495  007F86  6E02               	movwf	atraso_ms@valor+1,c
   496  007F88  0E03               	movlw	3
   497  007F8A  6E01               	movwf	atraso_ms@valor,c
   498  007F8C  EC5B  F03E         	call	_atraso_ms	;wreg free
   499                           
   500                           ;exerc1.c: 41: PORTAbits.RA5=0;
   501  007F90  9A80               	bcf	3968,5,c	;volatile
   502                           
   503                           ;exerc1.c: 42: if(PORTBbits.RB0 == 0){
   504  007F92  B081               	btfsc	3969,0,c	;volatile
   505  007F94  D015               	goto	l1054
   506                           
   507                           ;exerc1.c: 43: atraso_ms(1);
   508  007F96  0E00               	movlw	0
   509  007F98  6E02               	movwf	atraso_ms@valor+1,c
   510  007F9A  0E01               	movlw	1
   511  007F9C  6E01               	movwf	atraso_ms@valor,c
   512  007F9E  EC5B  F03E         	call	_atraso_ms	;wreg free
   513                           
   514                           ;exerc1.c: 44: if(PORTBbits.RB0 == 0 && aux1){
   515  007FA2  B081               	btfsc	3969,0,c	;volatile
   516  007FA4  D011               	goto	l1056
   517  007FA6  5011               	movf	_aux1,w,c
   518  007FA8  1012               	iorwf	_aux1+1,w,c
   519  007FAA  B4D8               	btfsc	status,2,c
   520  007FAC  D00D               	goto	l1056
   521                           
   522                           ;exerc1.c: 45: if(seg<=chamada){
   523  007FAE  5013               	movf	_seg,w,c
   524  007FB0  5C15               	subwf	_chamada,w,c
   525  007FB2  A0D8               	btfss	status,0,c
   526  007FB4  D009               	goto	l1056
   527                           
   528                           ;exerc1.c: 46: seg++;
   529  007FB6  2A13               	incf	_seg,f,c
   530                           
   531                           ;exerc1.c: 47: aux1=0;
   532  007FB8  0E00               	movlw	0
   533  007FBA  6E12               	movwf	_aux1+1,c
   534  007FBC  0E00               	movlw	0
   535  007FBE  D003               	goto	L1
   536  007FC0                     l1054:
   537                           
   538                           ;exerc1.c: 51: aux1=1;
   539  007FC0  0E00               	movlw	0
   540  007FC2  6E12               	movwf	_aux1+1,c
   541  007FC4  0E01               	movlw	1
   542  007FC6                     L1:
   543  007FC6  6E11               	movwf	_aux1,c
   544  007FC8                     l1056:
   545                           
   546                           ;exerc1.c: 52: }
   547                           ;exerc1.c: 53: if(PORTBbits.RB1 == 0){
   548  007FC8  B281               	btfsc	3969,1,c	;volatile
   549  007FCA  D015               	goto	l1070
   550                           
   551                           ;exerc1.c: 54: atraso_ms(1);
   552  007FCC  0E00               	movlw	0
   553  007FCE  6E02               	movwf	atraso_ms@valor+1,c
   554  007FD0  0E01               	movlw	1
   555  007FD2  6E01               	movwf	atraso_ms@valor,c
   556  007FD4  EC5B  F03E         	call	_atraso_ms	;wreg free
   557                           
   558                           ;exerc1.c: 55: if(PORTBbits.RB1 == 0 && aux2){
   559  007FD8  B281               	btfsc	3969,1,c	;volatile
   560  007FDA  0012               	return	
   561  007FDC  500F               	movf	_aux2,w,c
   562  007FDE  1010               	iorwf	_aux2+1,w,c
   563  007FE0  B4D8               	btfsc	status,2,c
   564  007FE2  0012               	return	
   565                           
   566                           ;exerc1.c: 56: if(seg>0){
   567  007FE4  5013               	movf	_seg,w,c
   568  007FE6  B4D8               	btfsc	status,2,c
   569  007FE8  0012               	return	
   570                           
   571                           ;exerc1.c: 57: seg--;
   572  007FEA  0613               	decf	_seg,f,c
   573                           
   574                           ;exerc1.c: 58: aux2=0;
   575  007FEC  0E00               	movlw	0
   576  007FEE  6E10               	movwf	_aux2+1,c
   577  007FF0  0E00               	movlw	0
   578  007FF2  6E0F               	movwf	_aux2,c
   579                           
   580                           ;exerc1.c: 59: }
   581                           ;exerc1.c: 60: }
   582                           ;exerc1.c: 61: }else{
   583  007FF4  0012               	return	
   584  007FF6                     l1070:
   585                           
   586                           ;exerc1.c: 62: aux2=1;
   587  007FF6  0E00               	movlw	0
   588  007FF8  6E10               	movwf	_aux2+1,c
   589  007FFA  0E01               	movlw	1
   590  007FFC  6E0F               	movwf	_aux2,c
   591  007FFE  0012               	return	
   592  008000                     __end_of_loop:
   593                           	opt stack 0
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           status	equ	0xFD8
   599                           
   600 ;; *************** function _display7s *****************
   601 ;; Defined at:
   602 ;;		line 27 in file "display7s.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;  v               1    wreg     unsigned char 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  v               1    0[COMRAM] unsigned char 
   607 ;; Return value:  Size  Location     Type
   608 ;;                  1    wreg      unsigned char 
   609 ;; Registers used:
   610 ;;		wreg, status,2, status,0
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   616 ;;      Params:         0       0       0       0       0       0       0       0       0
   617 ;;      Locals:         1       0       0       0       0       0       0       0       0
   618 ;;      Temps:          0       0       0       0       0       0       0       0       0
   619 ;;      Totals:         1       0       0       0       0       0       0       0       0
   620 ;;Total ram usage:        1 bytes
   621 ;; Hardware stack levels used:    1
   622 ;; This function calls:
   623 ;;		Nothing
   624 ;; This function is called by:
   625 ;;		_loop
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text3
   630  007D76                     __ptext3:
   631                           	opt stack 0
   632  007D76                     _display7s:
   633                           	opt stack 29
   634                           
   635                           ;incstack = 0
   636                           ;display7s@v stored from wreg
   637  007D76  6E01               	movwf	display7s@v,c
   638                           
   639                           ;display7s.c: 29: switch(v)
   640  007D78  D022               	goto	l770
   641  007D7A                     l700:
   642                           
   643                           ;display7s.c: 32: return 0x3F;
   644  007D7A  0E3F               	movlw	63
   645  007D7C  0012               	return	
   646  007D7E                     l704:
   647                           
   648                           ;display7s.c: 34: return 0x06;
   649  007D7E  0E06               	movlw	6
   650  007D80  0012               	return	
   651  007D82                     l708:
   652                           
   653                           ;display7s.c: 36: return 0x5B;
   654  007D82  0E5B               	movlw	91
   655  007D84  0012               	return	
   656  007D86                     l712:
   657                           
   658                           ;display7s.c: 38: return 0x4F;
   659  007D86  0E4F               	movlw	79
   660  007D88  0012               	return	
   661  007D8A                     l716:
   662                           
   663                           ;display7s.c: 40: return 0x66;
   664  007D8A  0E66               	movlw	102
   665  007D8C  0012               	return	
   666  007D8E                     l720:
   667                           
   668                           ;display7s.c: 42: return 0x6D;
   669  007D8E  0E6D               	movlw	109
   670  007D90  0012               	return	
   671  007D92                     l724:
   672                           
   673                           ;display7s.c: 44: return 0x7D;
   674  007D92  0E7D               	movlw	125
   675  007D94  0012               	return	
   676  007D96                     l728:
   677                           
   678                           ;display7s.c: 46: return 0x07;
   679  007D96  0E07               	movlw	7
   680  007D98  0012               	return	
   681  007D9A                     l732:
   682                           
   683                           ;display7s.c: 48: return 0x7F;
   684  007D9A  0E7F               	movlw	127
   685  007D9C  0012               	return	
   686  007D9E                     l736:
   687                           
   688                           ;display7s.c: 50: return 0x6F;
   689  007D9E  0E6F               	movlw	111
   690  007DA0  0012               	return	
   691  007DA2                     l740:
   692                           
   693                           ;display7s.c: 52: return 0x77;
   694  007DA2  0E77               	movlw	119
   695  007DA4  0012               	return	
   696  007DA6                     l744:
   697                           
   698                           ;display7s.c: 54: return 0x7c;
   699  007DA6  0E7C               	movlw	124
   700  007DA8  0012               	return	
   701  007DAA                     l748:
   702                           
   703                           ;display7s.c: 56: return 0x58;
   704  007DAA  0E58               	movlw	88
   705  007DAC  0012               	return	
   706  007DAE                     l752:
   707                           
   708                           ;display7s.c: 58: return 0x5E;
   709  007DAE  0E5E               	movlw	94
   710  007DB0  0012               	return	
   711  007DB2                     l756:
   712                           
   713                           ;display7s.c: 60: return 0x79;
   714  007DB2  0E79               	movlw	121
   715  007DB4  0012               	return	
   716  007DB6                     l760:
   717                           
   718                           ;display7s.c: 62: return 0x71;
   719  007DB6  0E71               	movlw	113
   720  007DB8  0012               	return	
   721  007DBA                     l764:
   722                           
   723                           ;display7s.c: 64: return 0;
   724  007DBA  0E00               	movlw	0
   725                           
   726                           ;display7s.c: 65: }
   727  007DBC  0012               	return	
   728  007DBE                     l770:
   729  007DBE  5001               	movf	display7s@v,w,c
   730                           
   731                           ; Switch size 1, requested type "space"
   732                           ; Number of cases is 16, Range of values is 0 to 15
   733                           ; switch strategies available:
   734                           ; Name         Instructions Cycles
   735                           ; simple_byte           49    25 (average)
   736                           ;	Chosen strategy is simple_byte
   737  007DC0  0A00               	xorlw	0	; case 0
   738  007DC2  B4D8               	btfsc	status,2,c
   739  007DC4  D7DA               	goto	l700
   740  007DC6  0A01               	xorlw	1	; case 1
   741  007DC8  B4D8               	btfsc	status,2,c
   742  007DCA  D7D9               	goto	l704
   743  007DCC  0A03               	xorlw	3	; case 2
   744  007DCE  B4D8               	btfsc	status,2,c
   745  007DD0  D7D8               	goto	l708
   746  007DD2  0A01               	xorlw	1	; case 3
   747  007DD4  B4D8               	btfsc	status,2,c
   748  007DD6  D7D7               	goto	l712
   749  007DD8  0A07               	xorlw	7	; case 4
   750  007DDA  B4D8               	btfsc	status,2,c
   751  007DDC  D7D6               	goto	l716
   752  007DDE  0A01               	xorlw	1	; case 5
   753  007DE0  B4D8               	btfsc	status,2,c
   754  007DE2  D7D5               	goto	l720
   755  007DE4  0A03               	xorlw	3	; case 6
   756  007DE6  B4D8               	btfsc	status,2,c
   757  007DE8  D7D4               	goto	l724
   758  007DEA  0A01               	xorlw	1	; case 7
   759  007DEC  B4D8               	btfsc	status,2,c
   760  007DEE  D7D3               	goto	l728
   761  007DF0  0A0F               	xorlw	15	; case 8
   762  007DF2  B4D8               	btfsc	status,2,c
   763  007DF4  D7D2               	goto	l732
   764  007DF6  0A01               	xorlw	1	; case 9
   765  007DF8  B4D8               	btfsc	status,2,c
   766  007DFA  D7D1               	goto	l736
   767  007DFC  0A03               	xorlw	3	; case 10
   768  007DFE  B4D8               	btfsc	status,2,c
   769  007E00  D7D0               	goto	l740
   770  007E02  0A01               	xorlw	1	; case 11
   771  007E04  B4D8               	btfsc	status,2,c
   772  007E06  D7CF               	goto	l744
   773  007E08  0A07               	xorlw	7	; case 12
   774  007E0A  B4D8               	btfsc	status,2,c
   775  007E0C  D7CE               	goto	l748
   776  007E0E  0A01               	xorlw	1	; case 13
   777  007E10  B4D8               	btfsc	status,2,c
   778  007E12  D7CD               	goto	l752
   779  007E14  0A03               	xorlw	3	; case 14
   780  007E16  B4D8               	btfsc	status,2,c
   781  007E18  D7CC               	goto	l756
   782  007E1A  0A01               	xorlw	1	; case 15
   783  007E1C  B4D8               	btfsc	status,2,c
   784  007E1E  D7CB               	goto	l760
   785  007E20  D7CC               	goto	l764
   786  007E22                     __end_of_display7s:
   787                           	opt stack 0
   788                           tblptru	equ	0xFF8
   789                           tblptrh	equ	0xFF7
   790                           tblptrl	equ	0xFF6
   791                           tablat	equ	0xFF5
   792                           status	equ	0xFD8
   793                           
   794 ;; *************** function _atraso_ms *****************
   795 ;; Defined at:
   796 ;;		line 29 in file "atraso.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  valor           2    0[COMRAM] unsigned int 
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  i               2    2[COMRAM] unsigned int 
   801 ;;  j2              1    5[COMRAM] volatile unsigned char 
   802 ;;  j1              1    4[COMRAM] volatile unsigned char 
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, status,2, status,0
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   812 ;;      Params:         2       0       0       0       0       0       0       0       0
   813 ;;      Locals:         4       0       0       0       0       0       0       0       0
   814 ;;      Temps:          0       0       0       0       0       0       0       0       0
   815 ;;      Totals:         6       0       0       0       0       0       0       0       0
   816 ;;Total ram usage:        6 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; This function calls:
   819 ;;		Nothing
   820 ;; This function is called by:
   821 ;;		_loop
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text4
   826  007CB6                     __ptext4:
   827                           	opt stack 0
   828  007CB6                     _atraso_ms:
   829                           	opt stack 29
   830                           
   831                           ;atraso.c: 31: unsigned int i;
   832                           ;atraso.c: 32: volatile unsigned char j1;
   833                           ;atraso.c: 33: volatile unsigned char j2=0;
   834                           
   835                           ;incstack = 0
   836  007CB6  0E00               	movlw	0
   837  007CB8  6E06               	movwf	atraso_ms@j2,c	;volatile
   838                           
   839                           ;atraso.c: 35: for (i =0; i< valor; i++)
   840  007CBA  0E00               	movlw	0
   841  007CBC  6E04               	movwf	atraso_ms@i+1,c
   842  007CBE  0E00               	movlw	0
   843  007CC0  6E03               	movwf	atraso_ms@i,c
   844  007CC2  D010               	goto	l932
   845  007CC4                     l928:
   846                           
   847                           ;atraso.c: 36: {
   848                           ;atraso.c: 37: j1=(8000000/(4000l*50));
   849  007CC4  0E28               	movlw	40
   850  007CC6  6E05               	movwf	atraso_ms@j1,c	;volatile
   851  007CC8                     l1:
   852  007CC8  0E09               	movlw	9	; 20 j1 ;# 
   853  007CCA  6F06               	movwf	atraso_ms@j2,b	; 20 j1 ;# 
   854  007CCC  F000               	nop		; 180 j2j1 ;# 
   855  007CCE  F000               	nop		; 180 j2j1 ;# 
   856  007CD0  2F06               	decfsz	atraso_ms@j2,f,b	; 160 j2j1 -j1 ;# 
   857                           
   858                           ; 40 2j1 ;# 
   859  007CD2  EF67  F03E         	goto	($+-3)	; 320 2j2j1 -2j1 ;# 
   860  007CD6  F000               	nop		; 20 j1 ;# 
   861  007CD8  2F05               	decfsz	atraso_ms@j1,f,b	; 19 j1 -1 ;# 
   862                           
   863                           ; 2 2 ;# 
   864  007CDA  EF64  F03E         	goto	l1	; 38 2j1 -2 ;# 
   865  007CDE  F000               	nop		; 1 1 ;# 
   866  007CE0  4A03               	infsnz	atraso_ms@i,f,c
   867  007CE2  2A04               	incf	atraso_ms@i+1,f,c
   868  007CE4                     l932:
   869  007CE4  5001               	movf	atraso_ms@valor,w,c
   870  007CE6  5C03               	subwf	atraso_ms@i,w,c
   871  007CE8  5002               	movf	atraso_ms@valor+1,w,c
   872  007CEA  5804               	subwfb	atraso_ms@i+1,w,c
   873  007CEC  B0D8               	btfsc	status,0,c
   874  007CEE  0012               	return	
   875  007CF0  D7E9               	goto	l928
   876  007CF2                     __end_of_atraso_ms:
   877                           	opt stack 0
   878                           tblptru	equ	0xFF8
   879                           tblptrh	equ	0xFF7
   880                           tblptrl	equ	0xFF6
   881                           tablat	equ	0xFF5
   882                           status	equ	0xFD8
   883                           
   884 ;; *************** function ___awdiv *****************
   885 ;; Defined at:
   886 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  dividend        2    0[COMRAM] int 
   889 ;;  divisor         2    2[COMRAM] int 
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  quotient        2    6[COMRAM] int 
   892 ;;  sign            1    5[COMRAM] unsigned char 
   893 ;;  counter         1    4[COMRAM] unsigned char 
   894 ;; Return value:  Size  Location     Type
   895 ;;                  2    0[COMRAM] int 
   896 ;; Registers used:
   897 ;;		wreg, status,2, status,0
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   903 ;;      Params:         4       0       0       0       0       0       0       0       0
   904 ;;      Locals:         4       0       0       0       0       0       0       0       0
   905 ;;      Temps:          0       0       0       0       0       0       0       0       0
   906 ;;      Totals:         8       0       0       0       0       0       0       0       0
   907 ;;Total ram usage:        8 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_loop
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           	psect	text5
   917  007CF2                     __ptext5:
   918                           	opt stack 0
   919  007CF2                     ___awdiv:
   920                           	opt stack 29
   921                           
   922                           ;incstack = 0
   923  007CF2  0E00               	movlw	0
   924  007CF4  6E06               	movwf	___awdiv@sign,c
   925  007CF6  AE04               	btfss	___awdiv@divisor+1,7,c
   926  007CF8  D006               	goto	l986
   927  007CFA  6C03               	negf	___awdiv@divisor,c
   928  007CFC  1E04               	comf	___awdiv@divisor+1,f,c
   929  007CFE  B0D8               	btfsc	status,0,c
   930  007D00  2A04               	incf	___awdiv@divisor+1,f,c
   931  007D02  0E01               	movlw	1
   932  007D04  6E06               	movwf	___awdiv@sign,c
   933  007D06                     l986:
   934  007D06  AE02               	btfss	___awdiv@dividend+1,7,c
   935  007D08  D006               	goto	l992
   936  007D0A  6C01               	negf	___awdiv@dividend,c
   937  007D0C  1E02               	comf	___awdiv@dividend+1,f,c
   938  007D0E  B0D8               	btfsc	status,0,c
   939  007D10  2A02               	incf	___awdiv@dividend+1,f,c
   940  007D12  0E01               	movlw	1
   941  007D14  1A06               	xorwf	___awdiv@sign,f,c
   942  007D16                     l992:
   943  007D16  0E00               	movlw	0
   944  007D18  6E08               	movwf	___awdiv@quotient+1,c
   945  007D1A  0E00               	movlw	0
   946  007D1C  6E07               	movwf	___awdiv@quotient,c
   947  007D1E  5003               	movf	___awdiv@divisor,w,c
   948  007D20  1004               	iorwf	___awdiv@divisor+1,w,c
   949  007D22  B4D8               	btfsc	status,2,c
   950  007D24  D01C               	goto	l1014
   951  007D26  0E01               	movlw	1
   952  007D28  6E05               	movwf	___awdiv@counter,c
   953  007D2A  D004               	goto	l1000
   954  007D2C                     l998:
   955  007D2C  90D8               	bcf	status,0,c
   956  007D2E  3603               	rlcf	___awdiv@divisor,f,c
   957  007D30  3604               	rlcf	___awdiv@divisor+1,f,c
   958  007D32  2A05               	incf	___awdiv@counter,f,c
   959  007D34                     l1000:
   960  007D34  AE04               	btfss	___awdiv@divisor+1,7,c
   961  007D36  D7FA               	goto	l998
   962  007D38                     l1002:
   963  007D38  90D8               	bcf	status,0,c
   964  007D3A  3607               	rlcf	___awdiv@quotient,f,c
   965  007D3C  3608               	rlcf	___awdiv@quotient+1,f,c
   966  007D3E  5003               	movf	___awdiv@divisor,w,c
   967  007D40  5C01               	subwf	___awdiv@dividend,w,c
   968  007D42  5004               	movf	___awdiv@divisor+1,w,c
   969  007D44  5802               	subwfb	___awdiv@dividend+1,w,c
   970  007D46  A0D8               	btfss	status,0,c
   971  007D48  D005               	goto	l1010
   972  007D4A  5003               	movf	___awdiv@divisor,w,c
   973  007D4C  5E01               	subwf	___awdiv@dividend,f,c
   974  007D4E  5004               	movf	___awdiv@divisor+1,w,c
   975  007D50  5A02               	subwfb	___awdiv@dividend+1,f,c
   976  007D52  8007               	bsf	___awdiv@quotient,0,c
   977  007D54                     l1010:
   978  007D54  90D8               	bcf	status,0,c
   979  007D56  3204               	rrcf	___awdiv@divisor+1,f,c
   980  007D58  3203               	rrcf	___awdiv@divisor,f,c
   981  007D5A  2E05               	decfsz	___awdiv@counter,f,c
   982  007D5C  D7ED               	goto	l1002
   983  007D5E                     l1014:
   984  007D5E  5006               	movf	___awdiv@sign,w,c
   985  007D60  B4D8               	btfsc	status,2,c
   986  007D62  D004               	goto	l1018
   987  007D64  6C07               	negf	___awdiv@quotient,c
   988  007D66  1E08               	comf	___awdiv@quotient+1,f,c
   989  007D68  B0D8               	btfsc	status,0,c
   990  007D6A  2A08               	incf	___awdiv@quotient+1,f,c
   991  007D6C                     l1018:
   992  007D6C  C007  F001         	movff	___awdiv@quotient,?___awdiv
   993  007D70  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   994  007D74  0012               	return	
   995  007D76                     __end_of___awdiv:
   996                           	opt stack 0
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           status	equ	0xFD8
  1002                           
  1003 ;; *************** function ___aldiv *****************
  1004 ;; Defined at:
  1005 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;  dividend        4    0[COMRAM] long 
  1008 ;;  divisor         4    4[COMRAM] long 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  quotient        4   10[COMRAM] long 
  1011 ;;  sign            1    9[COMRAM] unsigned char 
  1012 ;;  counter         1    8[COMRAM] unsigned char 
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  4    0[COMRAM] long 
  1015 ;; Registers used:
  1016 ;;		wreg, status,2, status,0
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1022 ;;      Params:         8       0       0       0       0       0       0       0       0
  1023 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1024 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1025 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1026 ;;Total ram usage:       14 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; This function calls:
  1029 ;;		Nothing
  1030 ;; This function is called by:
  1031 ;;		_loop
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text6
  1036  007E22                     __ptext6:
  1037                           	opt stack 0
  1038  007E22                     ___aldiv:
  1039                           	opt stack 29
  1040                           
  1041                           ;incstack = 0
  1042  007E22  0E00               	movlw	0
  1043  007E24  6E0A               	movwf	___aldiv@sign,c
  1044  007E26  AE08               	btfss	___aldiv@divisor+3,7,c
  1045  007E28  D00A               	goto	l942
  1046  007E2A  1E08               	comf	___aldiv@divisor+3,f,c
  1047  007E2C  1E07               	comf	___aldiv@divisor+2,f,c
  1048  007E2E  1E06               	comf	___aldiv@divisor+1,f,c
  1049  007E30  6C05               	negf	___aldiv@divisor,c
  1050  007E32  0E00               	movlw	0
  1051  007E34  2206               	addwfc	___aldiv@divisor+1,f,c
  1052  007E36  2207               	addwfc	___aldiv@divisor+2,f,c
  1053  007E38  2208               	addwfc	___aldiv@divisor+3,f,c
  1054  007E3A  0E01               	movlw	1
  1055  007E3C  6E0A               	movwf	___aldiv@sign,c
  1056  007E3E                     l942:
  1057  007E3E  AE04               	btfss	___aldiv@dividend+3,7,c
  1058  007E40  D00A               	goto	l948
  1059  007E42  1E04               	comf	___aldiv@dividend+3,f,c
  1060  007E44  1E03               	comf	___aldiv@dividend+2,f,c
  1061  007E46  1E02               	comf	___aldiv@dividend+1,f,c
  1062  007E48  6C01               	negf	___aldiv@dividend,c
  1063  007E4A  0E00               	movlw	0
  1064  007E4C  2202               	addwfc	___aldiv@dividend+1,f,c
  1065  007E4E  2203               	addwfc	___aldiv@dividend+2,f,c
  1066  007E50  2204               	addwfc	___aldiv@dividend+3,f,c
  1067  007E52  0E01               	movlw	1
  1068  007E54  1A0A               	xorwf	___aldiv@sign,f,c
  1069  007E56                     l948:
  1070  007E56  0E00               	movlw	0
  1071  007E58  6E0B               	movwf	___aldiv@quotient,c
  1072  007E5A  0E00               	movlw	0
  1073  007E5C  6E0C               	movwf	___aldiv@quotient+1,c
  1074  007E5E  0E00               	movlw	0
  1075  007E60  6E0D               	movwf	___aldiv@quotient+2,c
  1076  007E62  0E00               	movlw	0
  1077  007E64  6E0E               	movwf	___aldiv@quotient+3,c
  1078  007E66  5005               	movf	___aldiv@divisor,w,c
  1079  007E68  1006               	iorwf	___aldiv@divisor+1,w,c
  1080  007E6A  1007               	iorwf	___aldiv@divisor+2,w,c
  1081  007E6C  1008               	iorwf	___aldiv@divisor+3,w,c
  1082  007E6E  B4D8               	btfsc	status,2,c
  1083  007E70  D02A               	goto	l970
  1084  007E72  0E01               	movlw	1
  1085  007E74  6E09               	movwf	___aldiv@counter,c
  1086  007E76  D006               	goto	l956
  1087  007E78                     l954:
  1088  007E78  90D8               	bcf	status,0,c
  1089  007E7A  3605               	rlcf	___aldiv@divisor,f,c
  1090  007E7C  3606               	rlcf	___aldiv@divisor+1,f,c
  1091  007E7E  3607               	rlcf	___aldiv@divisor+2,f,c
  1092  007E80  3608               	rlcf	___aldiv@divisor+3,f,c
  1093  007E82  2A09               	incf	___aldiv@counter,f,c
  1094  007E84                     l956:
  1095  007E84  AE08               	btfss	___aldiv@divisor+3,7,c
  1096  007E86  D7F8               	goto	l954
  1097  007E88                     l958:
  1098  007E88  90D8               	bcf	status,0,c
  1099  007E8A  360B               	rlcf	___aldiv@quotient,f,c
  1100  007E8C  360C               	rlcf	___aldiv@quotient+1,f,c
  1101  007E8E  360D               	rlcf	___aldiv@quotient+2,f,c
  1102  007E90  360E               	rlcf	___aldiv@quotient+3,f,c
  1103  007E92  5005               	movf	___aldiv@divisor,w,c
  1104  007E94  5C01               	subwf	___aldiv@dividend,w,c
  1105  007E96  5006               	movf	___aldiv@divisor+1,w,c
  1106  007E98  5802               	subwfb	___aldiv@dividend+1,w,c
  1107  007E9A  5007               	movf	___aldiv@divisor+2,w,c
  1108  007E9C  5803               	subwfb	___aldiv@dividend+2,w,c
  1109  007E9E  5008               	movf	___aldiv@divisor+3,w,c
  1110  007EA0  5804               	subwfb	___aldiv@dividend+3,w,c
  1111  007EA2  A0D8               	btfss	status,0,c
  1112  007EA4  D009               	goto	l966
  1113  007EA6  5005               	movf	___aldiv@divisor,w,c
  1114  007EA8  5E01               	subwf	___aldiv@dividend,f,c
  1115  007EAA  5006               	movf	___aldiv@divisor+1,w,c
  1116  007EAC  5A02               	subwfb	___aldiv@dividend+1,f,c
  1117  007EAE  5007               	movf	___aldiv@divisor+2,w,c
  1118  007EB0  5A03               	subwfb	___aldiv@dividend+2,f,c
  1119  007EB2  5008               	movf	___aldiv@divisor+3,w,c
  1120  007EB4  5A04               	subwfb	___aldiv@dividend+3,f,c
  1121  007EB6  800B               	bsf	___aldiv@quotient,0,c
  1122  007EB8                     l966:
  1123  007EB8  90D8               	bcf	status,0,c
  1124  007EBA  3208               	rrcf	___aldiv@divisor+3,f,c
  1125  007EBC  3207               	rrcf	___aldiv@divisor+2,f,c
  1126  007EBE  3206               	rrcf	___aldiv@divisor+1,f,c
  1127  007EC0  3205               	rrcf	___aldiv@divisor,f,c
  1128  007EC2  2E09               	decfsz	___aldiv@counter,f,c
  1129  007EC4  D7E1               	goto	l958
  1130  007EC6                     l970:
  1131  007EC6  500A               	movf	___aldiv@sign,w,c
  1132  007EC8  B4D8               	btfsc	status,2,c
  1133  007ECA  D008               	goto	l974
  1134  007ECC  1E0E               	comf	___aldiv@quotient+3,f,c
  1135  007ECE  1E0D               	comf	___aldiv@quotient+2,f,c
  1136  007ED0  1E0C               	comf	___aldiv@quotient+1,f,c
  1137  007ED2  6C0B               	negf	___aldiv@quotient,c
  1138  007ED4  0E00               	movlw	0
  1139  007ED6  220C               	addwfc	___aldiv@quotient+1,f,c
  1140  007ED8  220D               	addwfc	___aldiv@quotient+2,f,c
  1141  007EDA  220E               	addwfc	___aldiv@quotient+3,f,c
  1142  007EDC                     l974:
  1143  007EDC  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  1144  007EE0  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  1145  007EE4  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  1146  007EE8  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  1147  007EEC  0012               	return	
  1148  007EEE                     __end_of___aldiv:
  1149                           	opt stack 0
  1150  0000                     tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           status	equ	0xFD8
  1155                           tblptru	equ	0xFF8
  1156                           tblptrh	equ	0xFF7
  1157                           tblptrl	equ	0xFF6
  1158                           tablat	equ	0xFF5
  1159                           status	equ	0xFD8
  1160                           
  1161                           	psect	rparam
  1162  0000                     tblptru	equ	0xFF8
  1163                           tblptrh	equ	0xFF7
  1164                           tblptrl	equ	0xFF6
  1165                           tablat	equ	0xFF5
  1166                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      21
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _loop->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1179
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0    1179
                            ___aldiv
                            ___awdiv
                          _atraso_ms
                          _display7s
 ---------------------------------------------------------------------------------
 (2) _display7s                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _atraso_ms                                            6     4      2     306
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     472
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     386
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___aldiv
     ___awdiv
     _atraso_ms
     _display7s
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      15       1       22.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      15      20        0.0%
DATA                 0      0      15       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Apr 26 19:56:03 2017

                      l1 7CC8                        _a 0014             ___awdiv@sign 0006  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l700 7D7A  
                    l720 7D8E                      l712 7D86                      l704 7D7E  
                    l740 7DA2                      l732 7D9A                      l724 7D92  
                    l716 7D8A                      l708 7D82                      l760 7DB6  
                    l752 7DAE                      l744 7DA6                      l736 7D9E  
                    l728 7D96                      l770 7DBE                      l932 7CE4  
                    l764 7DBA                      l756 7DB2                      l748 7DAA  
                    l942 7E3E                      l928 7CC4                      l954 7E78  
                    l970 7EC6                      l956 7E84                      l948 7E56  
                    l974 7EDC                      l966 7EB8                      l958 7E88  
                    l992 7D16                      l986 7D06                      l998 7D2C  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000             __CFG_BOR$OFF 000000  
                    _seg 0013             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1000 7D34                     l1010 7D54  
                   l1002 7D38                     l1014 7D5E                     l1018 7D6C  
                   l1070 7FF6                     l1054 7FC0                     l1056 7FC8  
                   l1076 7C88                     _aux1 0011                     _aux2 000F  
                   _main 7C6C                     _loop 7EEE                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
          __CFG_PLLDIV$2 000000           __CFG_CCP2MX$ON 000000          __end_of___aldiv 7EEE  
                  ?_main 0001          __end_of___awdiv 7D76                    ?_loop 0001  
            atraso_ms@j1 0005              atraso_ms@j2 0006          ___awdiv@divisor 0003  
        ___awdiv@counter 0005                    _PORTA 000F80                    _PORTB 000F81  
                  _PORTD 000F83            __CFG_USBDIV$2 000000                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _setup 7C56                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000          __initialization 7C8E             __end_of_main 7C8E  
           __end_of_loop 8000                   ??_main 000F                   ??_loop 000F  
          __activetblptr 000002                   _ADCON1 000FC1         ___awdiv@dividend 0001  
                 ?_setup 0001           __CFG_XINST$OFF 000000                ??___aldiv 0009  
              ??___awdiv 0005         ___awdiv@quotient 0007             __pdataCOMRAM 0015  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 7CAC          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_setup 7C6C  
     __size_of_display7s 00AC                  ??_setup 0001       __size_of_atraso_ms 003C  
        __CFG_VREGEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
                ___aldiv 7E22        __end_of_display7s 7E22                  ___awdiv 7CF2  
      __end_of_atraso_ms 7CF2          __CFG_STVREN$OFF 000000                  _chamada 0015  
                __pcinit 7C8E                  __ramtop 0800                  __ptext0 7C6C  
                __ptext1 7C56                  __ptext2 7EEE                  __ptext3 7D76  
                __ptext4 7CB6                  __ptext5 7CF2                  __ptext6 7E22  
       ___aldiv@dividend 0001     end_of_initialization 7CAC            __Lmediumconst 0000  
       ___aldiv@quotient 000B                _PORTAbits 000F80                _PORTBbits 000F81  
              _TRISAbits 000F92               display7s@v 0001               atraso_ms@i 0003  
          __pidataCOMRAM 7C55      start_initialization 7C8E         __CFG_LPT1OSC$OFF 000000  
            __pbssCOMRAM 000F                 ?___aldiv 0001                 ?___awdiv 0001  
              _display7s 7D76                _atraso_ms 7CB6           __size_of_setup 0016  
         atraso_ms@valor 0001          ___aldiv@divisor 0005          ___aldiv@counter 0009  
       __CFG_WDTPS$32768 000000               ?_display7s 0001               ?_atraso_ms 0001  
               __Hrparam 0000                 __Lrparam 0000         __size_of___aldiv 00CC  
       __size_of___awdiv 0084            __size_of_main 0022            __size_of_loop 0112  
            ??_display7s 0001    __CFG_CPUDIV$OSC1_PLL2 000000              ??_atraso_ms 0003  
           ___aldiv@sign 000A  
