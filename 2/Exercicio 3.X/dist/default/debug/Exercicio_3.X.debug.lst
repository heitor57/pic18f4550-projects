

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Jun 21 21:36:31 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 1.41
    31                           ; Generated 25/01/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _RCREG	set	4014
    65  0000                     _PIR1bits	set	3998
    66  0000                     _TXREG	set	4013
    67  0000                     _RCSTAbits	set	4011
    68  0000                     _TXSTAbits	set	4012
    69  0000                     _SPBRG	set	4015
    70  0000                     _PORTEbits	set	3972
    71  0000                     _PORTD	set	3971
    72  0000                     _TRISE	set	3990
    73  0000                     _TRISD	set	3989
    74  0000                     _TRISC	set	3988
    75  0000                     _TRISB	set	3987
    76  0000                     _TRISA	set	3986
    77  0000                     _ADCON1	set	4033
    78  0000                     _TRISCbits	set	3988
    79                           
    80                           	psect	smallconst
    81  000800                     __psmallconst:
    82                           	opt stack 0
    83  000800  00                 	db	0
    84  000801                     STR_1:
    85  000801  45                 	db	69	;'E'
    86  000802  74                 	db	116	;'t'
    87  000803  61                 	db	97	;'a'
    88  000804  70                 	db	112	;'p'
    89  000805  61                 	db	97	;'a'
    90  000806  20                 	db	32
    91  000807  00                 	db	0
    92  000808                     STR_3:
    93  000808  43                 	db	67	;'C'
    94  000809  00                 	db	0
    95  00080A                     STR_2:
    96  00080A  6C                 	db	108	;'l'
    97  00080B  00                 	db	0
    98                           
    99                           ; #config settings
   100  00080C  00                 	db	0	; dummy byte at the end
   101  0000                     
   102                           	psect	cinit
   103  000E62                     __pcinit:
   104                           	opt stack 0
   105  000E62                     start_initialization:
   106                           	opt stack 0
   107  000E62                     __initialization:
   108                           	opt stack 0
   109                           
   110                           ; Clear objects allocated to COMRAM (9 bytes)
   111  000E62  EE00  F020         	lfsr	0,__pbssCOMRAM
   112  000E66  0E09               	movlw	9
   113  000E68                     clear_0:
   114  000E68  6AEE               	clrf	postinc0,c
   115  000E6A  06E8               	decf	wreg,f,c
   116  000E6C  E1FD               	bnz	clear_0
   117  000E6E                     end_of_initialization:
   118                           	opt stack 0
   119  000E6E                     __end_of__initialization:
   120                           	opt stack 0
   121  000E6E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   122  000E70  6EF8               	movwf	tblptru,c
   123  000E72  0100               	movlb	0
   124  000E74  EF12  F007         	goto	_main	;jump to C main() function
   125                           tblptru	equ	0xFF8
   126                           postinc0	equ	0xFEE
   127                           wreg	equ	0xFE8
   128                           
   129                           	psect	bssCOMRAM
   130  000020                     __pbssCOMRAM:
   131                           	opt stack 0
   132  000020                     _volume_maximo:
   133                           	opt stack 0
   134  000020                     	ds	2
   135  000022                     _valor:
   136                           	opt stack 0
   137  000022                     	ds	1
   138  000023                     _buffer:
   139                           	opt stack 0
   140  000023                     	ds	6
   141                           tblptru	equ	0xFF8
   142                           postinc0	equ	0xFEE
   143                           wreg	equ	0xFE8
   144                           
   145                           	psect	cstackCOMRAM
   146  000001                     __pcstackCOMRAM:
   147                           	opt stack 0
   148  000001                     ?___lwmod:
   149                           	opt stack 0
   150  000001                     lcd_wr@val:
   151                           	opt stack 0
   152  000001                     serial_tx@val:
   153                           	opt stack 0
   154  000001                     atraso_ms@valor:
   155                           	opt stack 0
   156  000001                     ___lwmod@dividend:
   157                           	opt stack 0
   158                           
   159                           ; 2 bytes @ 0x0
   160  000001                     	ds	2
   161  000003                     atraso_ms@i:
   162                           	opt stack 0
   163  000003                     ___lwmod@divisor:
   164                           	opt stack 0
   165                           
   166                           ; 2 bytes @ 0x2
   167  000003                     	ds	2
   168  000005                     atraso_ms@j1:
   169                           	opt stack 0
   170  000005                     ___lwmod@counter:
   171                           	opt stack 0
   172                           
   173                           ; 1 bytes @ 0x4
   174  000005                     	ds	1
   175  000006                     ?___lwdiv:
   176                           	opt stack 0
   177  000006                     atraso_ms@j2:
   178                           	opt stack 0
   179  000006                     ___lwdiv@dividend:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0x5
   183  000006                     	ds	1
   184  000007                     lcd_cmd@val:
   185                           	opt stack 0
   186  000007                     lcd_dat@val:
   187                           	opt stack 0
   188  000007                     serial_rx@timeout:
   189                           	opt stack 0
   190                           
   191                           ; 2 bytes @ 0x6
   192  000007                     	ds	1
   193  000008                     ___lwdiv@divisor:
   194                           	opt stack 0
   195                           
   196                           ; 2 bytes @ 0x7
   197  000008                     	ds	1
   198  000009                     serial_rx@to:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x8
   202  000009                     	ds	1
   203  00000A                     ___lwdiv@quotient:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x9
   207  00000A                     	ds	2
   208  00000C                     ___lwdiv@counter:
   209                           	opt stack 0
   210                           
   211                           ; 1 bytes @ 0xB
   212  00000C                     	ds	1
   213  00000D                     ?_itoa:
   214                           	opt stack 0
   215  00000D                     itoa@val:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0xC
   219  00000D                     	ds	2
   220  00000F                     itoa@str:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0xE
   224  00000F                     	ds	2
   225  000011                     lcd_str@str:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x10
   229  000011                     	ds	2
   230  000013                     ??_lcd_str:
   231                           
   232                           ; 1 bytes @ 0x12
   233  000013                     	ds	2
   234  000015                     lcd_str@i:
   235                           	opt stack 0
   236                           
   237                           ; 1 bytes @ 0x14
   238  000015                     	ds	1
   239  000016                     ?_mostravol:
   240                           	opt stack 0
   241  000016                     ?_mostratemp:
   242                           	opt stack 0
   243  000016                     etapa@num:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x15
   247  000016                     	ds	2
   248  000018                     ??_mostravol:
   249  000018                     ??_mostratemp:
   250                           
   251                           ; 1 bytes @ 0x17
   252  000018                     	ds	2
   253  00001A                     mostravol@valorh:
   254                           	opt stack 0
   255  00001A                     mostratemp@valorh:
   256                           	opt stack 0
   257                           
   258                           ; 1 bytes @ 0x19
   259  00001A                     	ds	1
   260  00001B                     mostravol@valorl:
   261                           	opt stack 0
   262  00001B                     mostratemp@valorl:
   263                           	opt stack 0
   264                           
   265                           ; 1 bytes @ 0x1A
   266  00001B                     	ds	1
   267  00001C                     mostravol@valori:
   268                           	opt stack 0
   269  00001C                     mostratemp@valori:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x1B
   273  00001C                     	ds	2
   274  00001E                     ??_loop:
   275                           
   276                           ; 1 bytes @ 0x1D
   277  00001E                     	ds	2
   278  000020                     tblptru	equ	0xFF8
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           
   282                           ; 1 bytes @ 0x1F
   283 ;;
   284 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   285 ;;
   286 ;; *************** function _main *****************
   287 ;; Defined at:
   288 ;;		line 79 in file "config.c"
   289 ;; Parameters:    Size  Location     Type
   290 ;;		None
   291 ;; Auto vars:     Size  Location     Type
   292 ;;		None
   293 ;; Return value:  Size  Location     Type
   294 ;;                  1    wreg      void 
   295 ;; Registers used:
   296 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   297 ;; Tracked objects:
   298 ;;		On entry : 0/0
   299 ;;		On exit  : 0/0
   300 ;;		Unchanged: 0/0
   301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   302 ;;      Params:         0       0       0       0       0       0       0       0       0
   303 ;;      Locals:         0       0       0       0       0       0       0       0       0
   304 ;;      Temps:          0       0       0       0       0       0       0       0       0
   305 ;;      Totals:         0       0       0       0       0       0       0       0       0
   306 ;;Total ram usage:        0 bytes
   307 ;; Hardware stack levels required when called:    5
   308 ;; This function calls:
   309 ;;		_loop
   310 ;;		_setup
   311 ;; This function is called by:
   312 ;;		Startup code after reset
   313 ;; This function uses a non-reentrant model
   314 ;;
   315                           
   316                           	psect	text0
   317  000E24                     __ptext0:
   318                           	opt stack 0
   319  000E24                     _main:
   320                           	opt stack 26
   321                           
   322                           ;config.c: 81: ADCON1=0x0C;
   323                           
   324                           ;incstack = 0
   325  000E24  0E0C               	movlw	12
   326  000E26  6EC1               	movwf	4033,c	;volatile
   327                           
   328                           ;config.c: 82: TRISA=0xC3;
   329  000E28  0EC3               	movlw	195
   330  000E2A  6E92               	movwf	3986,c	;volatile
   331                           
   332                           ;config.c: 83: TRISB=0x07;
   333  000E2C  0E07               	movlw	7
   334  000E2E  6E93               	movwf	3987,c	;volatile
   335                           
   336                           ;config.c: 84: TRISC=0x01;
   337  000E30  0E01               	movlw	1
   338  000E32  6E94               	movwf	3988,c	;volatile
   339                           
   340                           ;config.c: 85: TRISD=0x00;
   341  000E34  0E00               	movlw	0
   342  000E36  6E95               	movwf	3989,c	;volatile
   343                           
   344                           ;config.c: 86: TRISE=0x00;
   345  000E38  0E00               	movlw	0
   346  000E3A  6E96               	movwf	3990,c	;volatile
   347                           
   348                           ;config.c: 88: setup();
   349  000E3C  EC00  F007         	call	_setup	;wreg free
   350  000E40                     l1416:
   351                           
   352                           ;config.c: 91: {
   353                           ;config.c: 92: loop();
   354  000E40  EC07  F004         	call	_loop	;wreg free
   355  000E44  D7FD               	goto	l1416
   356  000E46                     __end_of_main:
   357                           	opt stack 0
   358                           tblptru	equ	0xFF8
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362 ;; *************** function _setup *****************
   363 ;; Defined at:
   364 ;;		line 35 in file "exercicio3.c"
   365 ;; Parameters:    Size  Location     Type
   366 ;;		None
   367 ;; Auto vars:     Size  Location     Type
   368 ;;		None
   369 ;; Return value:  Size  Location     Type
   370 ;;                  1    wreg      void 
   371 ;; Registers used:
   372 ;;		wreg, status,2, status,0, cstack
   373 ;; Tracked objects:
   374 ;;		On entry : 0/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   378 ;;      Params:         0       0       0       0       0       0       0       0       0
   379 ;;      Locals:         0       0       0       0       0       0       0       0       0
   380 ;;      Temps:          0       0       0       0       0       0       0       0       0
   381 ;;      Totals:         0       0       0       0       0       0       0       0       0
   382 ;;Total ram usage:        0 bytes
   383 ;; Hardware stack levels used:    1
   384 ;; Hardware stack levels required when called:    3
   385 ;; This function calls:
   386 ;;		_lcd_cmd
   387 ;;		_lcd_init
   388 ;;		_serial_init
   389 ;;		_serial_tx
   390 ;; This function is called by:
   391 ;;		_main
   392 ;; This function uses a non-reentrant model
   393 ;;
   394                           
   395                           	psect	text1
   396  000E00                     __ptext1:
   397                           	opt stack 0
   398  000E00                     _setup:
   399                           	opt stack 27
   400                           
   401                           ;exercicio3.c: 36: TRISCbits.TRISC7 = 1;
   402                           
   403                           ;incstack = 0
   404  000E00  8E94               	bsf	3988,7,c	;volatile
   405                           
   406                           ;exercicio3.c: 37: lcd_init();
   407  000E02  EC19  F006         	call	_lcd_init	;wreg free
   408                           
   409                           ;exercicio3.c: 38: serial_init();
   410  000E06  EC3C  F007         	call	_serial_init	;wreg free
   411                           
   412                           ;exercicio3.c: 39: lcd_cmd(0x01);
   413  000E0A  0E01               	movlw	1
   414  000E0C  ECEB  F006         	call	_lcd_cmd
   415                           
   416                           ;exercicio3.c: 40: serial_tx(0xFF);
   417  000E10  0EFF               	movlw	255
   418  000E12  EC46  F007         	call	_serial_tx
   419                           
   420                           ;exercicio3.c: 41: serial_tx(0xFF);
   421  000E16  0EFF               	movlw	255
   422  000E18  EC46  F007         	call	_serial_tx
   423                           
   424                           ;exercicio3.c: 42: serial_tx(0xFF);
   425  000E1C  0EFF               	movlw	255
   426  000E1E  EC46  F007         	call	_serial_tx
   427  000E22  0012               	return		;funcret
   428  000E24                     __end_of_setup:
   429                           	opt stack 0
   430                           tblptru	equ	0xFF8
   431                           postinc0	equ	0xFEE
   432                           wreg	equ	0xFE8
   433                           
   434 ;; *************** function _serial_init *****************
   435 ;; Defined at:
   436 ;;		line 35 in file "serial.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;		None
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, status,2
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   450 ;;      Params:         0       0       0       0       0       0       0       0       0
   451 ;;      Locals:         0       0       0       0       0       0       0       0       0
   452 ;;      Temps:          0       0       0       0       0       0       0       0       0
   453 ;;      Totals:         0       0       0       0       0       0       0       0       0
   454 ;;Total ram usage:        0 bytes
   455 ;; Hardware stack levels used:    1
   456 ;; This function calls:
   457 ;;		Nothing
   458 ;; This function is called by:
   459 ;;		_setup
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           	psect	text2
   464  000E78                     __ptext2:
   465                           	opt stack 0
   466  000E78                     _serial_init:
   467                           	opt stack 29
   468                           
   469                           ;serial.c: 40: SPBRG=((8000000/(16l*9600))-1);
   470                           
   471                           ;incstack = 0
   472  000E78  0E33               	movlw	51
   473  000E7A  6EAF               	movwf	4015,c	;volatile
   474                           
   475                           ;serial.c: 41: TXSTAbits.BRGH=1;
   476  000E7C  84AC               	bsf	4012,2,c	;volatile
   477                           
   478                           ;serial.c: 48: TXSTAbits.TX9=0;
   479  000E7E  9CAC               	bcf	4012,6,c	;volatile
   480                           
   481                           ;serial.c: 49: TXSTAbits.TXEN=1;
   482  000E80  8AAC               	bsf	4012,5,c	;volatile
   483                           
   484                           ;serial.c: 50: TXSTAbits.SYNC=0;
   485  000E82  98AC               	bcf	4012,4,c	;volatile
   486                           
   487                           ;serial.c: 51: RCSTAbits.SPEN=1;
   488  000E84  8EAB               	bsf	4011,7,c	;volatile
   489                           
   490                           ;serial.c: 52: RCSTAbits.RX9=0;
   491  000E86  9CAB               	bcf	4011,6,c	;volatile
   492                           
   493                           ;serial.c: 53: RCSTAbits.CREN=1;
   494  000E88  88AB               	bsf	4011,4,c	;volatile
   495  000E8A  0012               	return		;funcret
   496  000E8C                     __end_of_serial_init:
   497                           	opt stack 0
   498                           tblptru	equ	0xFF8
   499                           postinc0	equ	0xFEE
   500                           wreg	equ	0xFE8
   501                           
   502 ;; *************** function _lcd_init *****************
   503 ;; Defined at:
   504 ;;		line 57 in file "lcd.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg, status,2, status,0, cstack
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   518 ;;      Params:         0       0       0       0       0       0       0       0       0
   519 ;;      Locals:         0       0       0       0       0       0       0       0       0
   520 ;;      Temps:          0       0       0       0       0       0       0       0       0
   521 ;;      Totals:         0       0       0       0       0       0       0       0       0
   522 ;;Total ram usage:        0 bytes
   523 ;; Hardware stack levels used:    1
   524 ;; Hardware stack levels required when called:    2
   525 ;; This function calls:
   526 ;;		_atraso_ms
   527 ;;		_lcd_cmd
   528 ;; This function is called by:
   529 ;;		_setup
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text3
   534  000C32                     __ptext3:
   535                           	opt stack 0
   536  000C32                     _lcd_init:
   537                           	opt stack 27
   538                           
   539                           ;lcd.c: 59: PORTEbits.RE1=0;
   540                           
   541                           ;incstack = 0
   542  000C32  9284               	bcf	3972,1,c	;volatile
   543                           
   544                           ;lcd.c: 60: PORTEbits.RE2=0;
   545  000C34  9484               	bcf	3972,2,c	;volatile
   546                           
   547                           ;lcd.c: 61: atraso_ms(20);
   548  000C36  0E00               	movlw	0
   549  000C38  6E02               	movwf	atraso_ms@valor+1,c
   550  000C3A  0E14               	movlw	20
   551  000C3C  6E01               	movwf	atraso_ms@valor,c
   552  000C3E  ECB8  F006         	call	_atraso_ms	;wreg free
   553                           
   554                           ;lcd.c: 62: PORTEbits.RE1=1;
   555  000C42  8284               	bsf	3972,1,c	;volatile
   556                           
   557                           ;lcd.c: 64: lcd_cmd(0x38);
   558  000C44  0E38               	movlw	56
   559  000C46  ECEB  F006         	call	_lcd_cmd
   560                           
   561                           ;lcd.c: 65: atraso_ms(5);
   562  000C4A  0E00               	movlw	0
   563  000C4C  6E02               	movwf	atraso_ms@valor+1,c
   564  000C4E  0E05               	movlw	5
   565  000C50  6E01               	movwf	atraso_ms@valor,c
   566  000C52  ECB8  F006         	call	_atraso_ms	;wreg free
   567                           
   568                           ;lcd.c: 66: lcd_cmd(0x38);
   569  000C56  0E38               	movlw	56
   570  000C58  ECEB  F006         	call	_lcd_cmd
   571                           
   572                           ;lcd.c: 67: atraso_ms(1);
   573  000C5C  0E00               	movlw	0
   574  000C5E  6E02               	movwf	atraso_ms@valor+1,c
   575  000C60  0E01               	movlw	1
   576  000C62  6E01               	movwf	atraso_ms@valor,c
   577  000C64  ECB8  F006         	call	_atraso_ms	;wreg free
   578                           
   579                           ;lcd.c: 68: lcd_cmd(0x38);
   580  000C68  0E38               	movlw	56
   581  000C6A  ECEB  F006         	call	_lcd_cmd
   582                           
   583                           ;lcd.c: 69: lcd_cmd(0x08);
   584  000C6E  0E08               	movlw	8
   585  000C70  ECEB  F006         	call	_lcd_cmd
   586                           
   587                           ;lcd.c: 70: lcd_cmd(0x0F);
   588  000C74  0E0F               	movlw	15
   589  000C76  ECEB  F006         	call	_lcd_cmd
   590                           
   591                           ;lcd.c: 71: lcd_cmd(0x01);
   592  000C7A  0E01               	movlw	1
   593  000C7C  ECEB  F006         	call	_lcd_cmd
   594                           
   595                           ;lcd.c: 72: lcd_cmd(0x38);
   596  000C80  0E38               	movlw	56
   597  000C82  ECEB  F006         	call	_lcd_cmd
   598                           
   599                           ;lcd.c: 73: lcd_cmd(0x80);
   600  000C86  0E80               	movlw	128
   601  000C88  ECEB  F006         	call	_lcd_cmd
   602  000C8C  0012               	return		;funcret
   603  000C8E                     __end_of_lcd_init:
   604                           	opt stack 0
   605                           tblptru	equ	0xFF8
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           
   609 ;; *************** function _loop *****************
   610 ;; Defined at:
   611 ;;		line 77 in file "exercicio3.c"
   612 ;; Parameters:    Size  Location     Type
   613 ;;		None
   614 ;; Auto vars:     Size  Location     Type
   615 ;;		None
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   625 ;;      Params:         0       0       0       0       0       0       0       0       0
   626 ;;      Locals:         0       0       0       0       0       0       0       0       0
   627 ;;      Temps:          2       0       0       0       0       0       0       0       0
   628 ;;      Totals:         2       0       0       0       0       0       0       0       0
   629 ;;Total ram usage:        2 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; Hardware stack levels required when called:    4
   632 ;; This function calls:
   633 ;;		_atraso_ms
   634 ;;		_etapa
   635 ;;		_mostratemp
   636 ;;		_mostravol
   637 ;;		_serial_rx
   638 ;;		_serial_tx
   639 ;; This function is called by:
   640 ;;		_main
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644                           	psect	text4
   645  00080E                     __ptext4:
   646                           	opt stack 0
   647  00080E                     _loop:
   648                           	opt stack 26
   649                           
   650                           ;exercicio3.c: 78: serial_tx(0x00);
   651                           
   652                           ;incstack = 0
   653  00080E  0E00               	movlw	0
   654  000810  EC46  F007         	call	_serial_tx
   655                           
   656                           ;exercicio3.c: 79: serial_tx(0x01);
   657  000814  0E01               	movlw	1
   658  000816  EC46  F007         	call	_serial_tx
   659                           
   660                           ;exercicio3.c: 80: serial_tx(0x01);
   661  00081A  0E01               	movlw	1
   662  00081C  EC46  F007         	call	_serial_tx
   663                           
   664                           ;exercicio3.c: 81: serial_tx(0x00);
   665  000820  0E00               	movlw	0
   666  000822  EC46  F007         	call	_serial_tx
   667                           
   668                           ;exercicio3.c: 82: etapa(1);
   669  000826  0E00               	movlw	0
   670  000828  6E17               	movwf	etapa@num+1,c
   671  00082A  0E01               	movlw	1
   672  00082C  6E16               	movwf	etapa@num,c
   673  00082E  EC23  F007         	call	_etapa	;wreg free
   674  000832                     l1318:
   675                           
   676                           ;exercicio3.c: 84: serial_tx(0x10);
   677  000832  0E10               	movlw	16
   678  000834  EC46  F007         	call	_serial_tx
   679                           
   680                           ;exercicio3.c: 85: valor = serial_rx(0);
   681  000838  0E00               	movlw	0
   682  00083A  6E08               	movwf	serial_rx@timeout+1,c
   683  00083C  0E00               	movlw	0
   684  00083E  6E07               	movwf	serial_rx@timeout,c
   685  000840  EC70  F006         	call	_serial_rx	;wreg free
   686  000844  6E22               	movwf	_valor,c
   687                           
   688                           ;exercicio3.c: 86: mostravol();
   689  000846  ECDF  F005         	call	_mostravol	;wreg free
   690                           
   691                           ;exercicio3.c: 87: mostratemp();
   692  00084A  ECA3  F005         	call	_mostratemp	;wreg free
   693                           
   694                           ;exercicio3.c: 88: } while (!valor);
   695  00084E  5022               	movf	_valor,w,c
   696  000850  B4D8               	btfsc	status,2,c
   697  000852  D7EF               	goto	l1318
   698                           
   699                           ;exercicio3.c: 89: volume_maximo = mostravol();
   700  000854  ECDF  F005         	call	_mostravol	;wreg free
   701  000858  C016  F020         	movff	?_mostravol,_volume_maximo
   702  00085C  C017  F021         	movff	?_mostravol+1,_volume_maximo+1
   703                           
   704                           ;exercicio3.c: 90: serial_tx(0x00);
   705  000860  0E00               	movlw	0
   706  000862  EC46  F007         	call	_serial_tx
   707                           
   708                           ;exercicio3.c: 91: serial_tx(0x00);
   709  000866  0E00               	movlw	0
   710  000868  EC46  F007         	call	_serial_tx
   711                           
   712                           ;exercicio3.c: 92: serial_tx(0x21);
   713  00086C  0E21               	movlw	33
   714  00086E  EC46  F007         	call	_serial_tx
   715                           
   716                           ;exercicio3.c: 93: serial_tx(0);
   717  000872  0E00               	movlw	0
   718  000874  EC46  F007         	call	_serial_tx
   719                           
   720                           ;exercicio3.c: 94: serial_tx(40);
   721  000878  0E28               	movlw	40
   722  00087A  EC46  F007         	call	_serial_tx
   723                           
   724                           ;exercicio3.c: 95: etapa(2);
   725  00087E  0E00               	movlw	0
   726  000880  6E17               	movwf	etapa@num+1,c
   727  000882  0E02               	movlw	2
   728  000884  6E16               	movwf	etapa@num,c
   729  000886  EC23  F007         	call	_etapa	;wreg free
   730                           
   731                           ;exercicio3.c: 96: serial_tx(0x02);
   732  00088A  0E02               	movlw	2
   733  00088C  EC46  F007         	call	_serial_tx
   734                           
   735                           ;exercicio3.c: 97: serial_tx(0x01);
   736  000890  0E01               	movlw	1
   737  000892  EC46  F007         	call	_serial_tx
   738                           
   739                           ;exercicio3.c: 98: etapa(3);
   740  000896  0E00               	movlw	0
   741  000898  6E17               	movwf	etapa@num+1,c
   742  00089A  0E03               	movlw	3
   743  00089C  6E16               	movwf	etapa@num,c
   744  00089E  EC23  F007         	call	_etapa	;wreg free
   745  0008A2                     l1348:
   746                           
   747                           ;exercicio3.c: 100: serial_tx(0x13);
   748  0008A2  0E13               	movlw	19
   749  0008A4  EC46  F007         	call	_serial_tx
   750                           
   751                           ;exercicio3.c: 101: valor = serial_rx(0);
   752  0008A8  0E00               	movlw	0
   753  0008AA  6E08               	movwf	serial_rx@timeout+1,c
   754  0008AC  0E00               	movlw	0
   755  0008AE  6E07               	movwf	serial_rx@timeout,c
   756  0008B0  EC70  F006         	call	_serial_rx	;wreg free
   757  0008B4  6E22               	movwf	_valor,c
   758                           
   759                           ;exercicio3.c: 102: mostratemp();
   760  0008B6  ECA3  F005         	call	_mostratemp	;wreg free
   761                           
   762                           ;exercicio3.c: 103: } while (!valor);
   763  0008BA  5022               	movf	_valor,w,c
   764  0008BC  B4D8               	btfsc	status,2,c
   765  0008BE  D7F1               	goto	l1348
   766                           
   767                           ;exercicio3.c: 104: serial_tx(0x02);
   768  0008C0  0E02               	movlw	2
   769  0008C2  EC46  F007         	call	_serial_tx
   770                           
   771                           ;exercicio3.c: 105: serial_tx(0x00);
   772  0008C6  0E00               	movlw	0
   773  0008C8  EC46  F007         	call	_serial_tx
   774                           
   775                           ;exercicio3.c: 106: etapa(4);
   776  0008CC  0E00               	movlw	0
   777  0008CE  6E17               	movwf	etapa@num+1,c
   778  0008D0  0E04               	movlw	4
   779  0008D2  6E16               	movwf	etapa@num,c
   780  0008D4  EC23  F007         	call	_etapa	;wreg free
   781                           
   782                           ;exercicio3.c: 107: serial_tx(0x04);
   783  0008D8  0E04               	movlw	4
   784  0008DA  EC46  F007         	call	_serial_tx
   785                           
   786                           ;exercicio3.c: 108: serial_tx(0x01);
   787  0008DE  0E01               	movlw	1
   788  0008E0  EC46  F007         	call	_serial_tx
   789                           
   790                           ;exercicio3.c: 109: atraso_ms(2000);
   791  0008E4  0E07               	movlw	7
   792  0008E6  6E02               	movwf	atraso_ms@valor+1,c
   793  0008E8  0ED0               	movlw	208
   794  0008EA  6E01               	movwf	atraso_ms@valor,c
   795  0008EC  ECB8  F006         	call	_atraso_ms	;wreg free
   796                           
   797                           ;exercicio3.c: 110: serial_tx(0x04);
   798  0008F0  0E04               	movlw	4
   799  0008F2  EC46  F007         	call	_serial_tx
   800                           
   801                           ;exercicio3.c: 111: serial_tx(0x00);
   802  0008F6  0E00               	movlw	0
   803  0008F8  EC46  F007         	call	_serial_tx
   804                           
   805                           ;exercicio3.c: 112: etapa(5);
   806  0008FC  0E00               	movlw	0
   807  0008FE  6E17               	movwf	etapa@num+1,c
   808  000900  0E05               	movlw	5
   809  000902  6E16               	movwf	etapa@num,c
   810  000904  EC23  F007         	call	_etapa	;wreg free
   811                           
   812                           ;exercicio3.c: 113: serial_tx(0x01);
   813  000908  0E01               	movlw	1
   814  00090A  EC46  F007         	call	_serial_tx
   815                           
   816                           ;exercicio3.c: 114: serial_tx(0x01);
   817  00090E  0E01               	movlw	1
   818  000910  EC46  F007         	call	_serial_tx
   819  000914                     l1376:
   820                           
   821                           ;exercicio3.c: 116: mostratemp();
   822  000914  ECA3  F005         	call	_mostratemp	;wreg free
   823                           
   824                           ;exercicio3.c: 117: } while (mostravol() > volume_maximo/2);
   825  000918  ECDF  F005         	call	_mostravol	;wreg free
   826  00091C  90D8               	bcf	status,0,c
   827  00091E  3021               	rrcf	_volume_maximo+1,w,c
   828  000920  6E1F               	movwf	(??_loop+1)& (0+255),c
   829  000922  3020               	rrcf	_volume_maximo,w,c
   830  000924  6E1E               	movwf	??_loop& (0+255),c
   831  000926  5016               	movf	?_mostravol,w,c
   832  000928  5C1E               	subwf	??_loop,w,c
   833  00092A  5017               	movf	?_mostravol+1,w,c
   834  00092C  581F               	subwfb	??_loop+1,w,c
   835  00092E  A0D8               	btfss	status,0,c
   836  000930  D7F1               	goto	l1376
   837                           
   838                           ;exercicio3.c: 118: serial_tx(0x01);
   839  000932  0E01               	movlw	1
   840  000934  EC46  F007         	call	_serial_tx
   841                           
   842                           ;exercicio3.c: 119: serial_tx(0x00);
   843  000938  0E00               	movlw	0
   844  00093A  EC46  F007         	call	_serial_tx
   845                           
   846                           ;exercicio3.c: 120: etapa(6);
   847  00093E  0E00               	movlw	0
   848  000940  6E17               	movwf	etapa@num+1,c
   849  000942  0E06               	movlw	6
   850  000944  6E16               	movwf	etapa@num,c
   851  000946  EC23  F007         	call	_etapa	;wreg free
   852                           
   853                           ;exercicio3.c: 121: serial_tx(0x03);
   854  00094A  0E03               	movlw	3
   855  00094C  EC46  F007         	call	_serial_tx
   856                           
   857                           ;exercicio3.c: 122: serial_tx(0x01);
   858  000950  0E01               	movlw	1
   859  000952  EC46  F007         	call	_serial_tx
   860  000956                     l1388:
   861                           
   862                           ;exercicio3.c: 125: }while(mostratemp()>18);
   863  000956  ECA3  F005         	call	_mostratemp	;wreg free
   864  00095A  5017               	movf	?_mostratemp+1,w,c
   865  00095C  E1FC               	bnz	l1388
   866  00095E  0E13               	movlw	19
   867  000960  5C16               	subwf	?_mostratemp,w,c
   868  000962  B0D8               	btfsc	status,0,c
   869  000964  D7F8               	goto	l1388
   870                           
   871                           ;exercicio3.c: 126: etapa(7);
   872  000966  0E00               	movlw	0
   873  000968  6E17               	movwf	etapa@num+1,c
   874  00096A  0E07               	movlw	7
   875  00096C  6E16               	movwf	etapa@num,c
   876  00096E  EC23  F007         	call	_etapa	;wreg free
   877                           
   878                           ;exercicio3.c: 127: serial_tx(0x03);
   879  000972  0E03               	movlw	3
   880  000974  EC46  F007         	call	_serial_tx
   881                           
   882                           ;exercicio3.c: 128: serial_tx(0x00);
   883  000978  0E00               	movlw	0
   884  00097A  EC46  F007         	call	_serial_tx
   885                           
   886                           ;exercicio3.c: 129: serial_tx(0x01);
   887  00097E  0E01               	movlw	1
   888  000980  EC46  F007         	call	_serial_tx
   889                           
   890                           ;exercicio3.c: 130: serial_tx(0x01);
   891  000984  0E01               	movlw	1
   892  000986  EC46  F007         	call	_serial_tx
   893  00098A                     l1400:
   894                           
   895                           ;exercicio3.c: 132: serial_tx(0x11);
   896  00098A  0E11               	movlw	17
   897  00098C  EC46  F007         	call	_serial_tx
   898                           
   899                           ;exercicio3.c: 133: valor = serial_rx(0);
   900  000990  0E00               	movlw	0
   901  000992  6E08               	movwf	serial_rx@timeout+1,c
   902  000994  0E00               	movlw	0
   903  000996  6E07               	movwf	serial_rx@timeout,c
   904  000998  EC70  F006         	call	_serial_rx	;wreg free
   905  00099C  6E22               	movwf	_valor,c
   906                           
   907                           ;exercicio3.c: 134: mostravol();
   908  00099E  ECDF  F005         	call	_mostravol	;wreg free
   909                           
   910                           ;exercicio3.c: 135: mostratemp();
   911  0009A2  ECA3  F005         	call	_mostratemp	;wreg free
   912                           
   913                           ;exercicio3.c: 136: }while(valor);
   914  0009A6  5022               	movf	_valor,w,c
   915  0009A8  A4D8               	btfss	status,2,c
   916  0009AA  D7EF               	goto	l1400
   917                           
   918                           ;exercicio3.c: 137: etapa(8);
   919  0009AC  0E00               	movlw	0
   920  0009AE  6E17               	movwf	etapa@num+1,c
   921  0009B0  0E08               	movlw	8
   922  0009B2  6E16               	movwf	etapa@num,c
   923  0009B4  EC23  F007         	call	_etapa	;wreg free
   924  0009B8  0012               	return		;funcret
   925  0009BA                     __end_of_loop:
   926                           	opt stack 0
   927                           tblptru	equ	0xFF8
   928                           postinc0	equ	0xFEE
   929                           wreg	equ	0xFE8
   930                           status	equ	0xFD8
   931                           
   932 ;; *************** function _mostravol *****************
   933 ;; Defined at:
   934 ;;		line 51 in file "exercicio3.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;		None
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  valori          2   27[COMRAM] unsigned int 
   939 ;;  valorl          1   26[COMRAM] unsigned char 
   940 ;;  valorh          1   25[COMRAM] unsigned char 
   941 ;; Return value:  Size  Location     Type
   942 ;;                  2   21[COMRAM] unsigned int 
   943 ;; Registers used:
   944 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   950 ;;      Params:         2       0       0       0       0       0       0       0       0
   951 ;;      Locals:         4       0       0       0       0       0       0       0       0
   952 ;;      Temps:          2       0       0       0       0       0       0       0       0
   953 ;;      Totals:         8       0       0       0       0       0       0       0       0
   954 ;;Total ram usage:        8 bytes
   955 ;; Hardware stack levels used:    1
   956 ;; Hardware stack levels required when called:    3
   957 ;; This function calls:
   958 ;;		_itoa
   959 ;;		_lcd_cmd
   960 ;;		_lcd_str
   961 ;;		_serial_rx
   962 ;;		_serial_tx
   963 ;; This function is called by:
   964 ;;		_loop
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           	psect	text5
   969  000BBE                     __ptext5:
   970                           	opt stack 0
   971  000BBE                     _mostravol:
   972                           	opt stack 26
   973                           
   974                           ;exercicio3.c: 52: unsigned char valorh,valorl;
   975                           ;exercicio3.c: 53: unsigned int valori;
   976                           ;exercicio3.c: 54: serial_tx(0x30);
   977                           
   978                           ;incstack = 0
   979  000BBE  0E30               	movlw	48
   980  000BC0  EC46  F007         	call	_serial_tx
   981                           
   982                           ;exercicio3.c: 55: valorh = serial_rx(0);
   983  000BC4  0E00               	movlw	0
   984  000BC6  6E08               	movwf	serial_rx@timeout+1,c
   985  000BC8  0E00               	movlw	0
   986  000BCA  6E07               	movwf	serial_rx@timeout,c
   987  000BCC  EC70  F006         	call	_serial_rx	;wreg free
   988  000BD0  6E1A               	movwf	mostravol@valorh,c
   989                           
   990                           ;exercicio3.c: 56: valorl = serial_rx(0);
   991  000BD2  0E00               	movlw	0
   992  000BD4  6E08               	movwf	serial_rx@timeout+1,c
   993  000BD6  0E00               	movlw	0
   994  000BD8  6E07               	movwf	serial_rx@timeout,c
   995  000BDA  EC70  F006         	call	_serial_rx	;wreg free
   996  000BDE  6E1B               	movwf	mostravol@valorl,c
   997                           
   998                           ;exercicio3.c: 57: valori = (valorh << 8) | valorl;
   999  000BE0  501B               	movf	mostravol@valorl,w,c
  1000  000BE2  C01A  F018         	movff	mostravol@valorh,??_mostravol
  1001  000BE6  6A19               	clrf	(??_mostravol+1)& (0+255),c
  1002  000BE8  C018  F019         	movff	??_mostravol,??_mostravol+1
  1003  000BEC  6A18               	clrf	??_mostravol,c
  1004  000BEE  1018               	iorwf	??_mostravol,w,c
  1005  000BF0  6E1C               	movwf	mostravol@valori,c
  1006  000BF2  5019               	movf	??_mostravol+1,w,c
  1007  000BF4  6E1D               	movwf	mostravol@valori+1,c
  1008                           
  1009                           ;exercicio3.c: 58: lcd_cmd(0xC0);
  1010  000BF6  0EC0               	movlw	192
  1011  000BF8  ECEB  F006         	call	_lcd_cmd
  1012                           
  1013                           ;exercicio3.c: 59: lcd_str(itoa(valori,buffer));
  1014  000BFC  C01C  F00D         	movff	mostravol@valori,itoa@val
  1015  000C00  C01D  F00E         	movff	mostravol@valori+1,itoa@val+1
  1016  000C04  0E23               	movlw	low _buffer
  1017  000C06  6E0F               	movwf	itoa@str,c
  1018  000C08  0E00               	movlw	high _buffer
  1019  000C0A  6E10               	movwf	itoa@str+1,c
  1020  000C0C  ECDD  F004         	call	_itoa	;wreg free
  1021  000C10  C00D  F011         	movff	?_itoa,lcd_str@str
  1022  000C14  C00E  F012         	movff	?_itoa+1,lcd_str@str+1
  1023  000C18  EC65  F005         	call	_lcd_str	;wreg free
  1024                           
  1025                           ;exercicio3.c: 60: lcd_str("l");
  1026  000C1C  0E0A               	movlw	low STR_2
  1027  000C1E  6E11               	movwf	lcd_str@str,c
  1028  000C20  0E08               	movlw	high STR_2
  1029  000C22  6E12               	movwf	lcd_str@str+1,c
  1030  000C24  EC65  F005         	call	_lcd_str	;wreg free
  1031                           
  1032                           ;exercicio3.c: 61: return valori;
  1033  000C28  C01C  F016         	movff	mostravol@valori,?_mostravol
  1034  000C2C  C01D  F017         	movff	mostravol@valori+1,?_mostravol+1
  1035  000C30  0012               	return	
  1036  000C32                     __end_of_mostravol:
  1037                           	opt stack 0
  1038                           tblptru	equ	0xFF8
  1039                           postinc0	equ	0xFEE
  1040                           wreg	equ	0xFE8
  1041                           status	equ	0xFD8
  1042                           
  1043 ;; *************** function _mostratemp *****************
  1044 ;; Defined at:
  1045 ;;		line 64 in file "exercicio3.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;		None
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;  valori          2   27[COMRAM] unsigned int 
  1050 ;;  valorl          1   26[COMRAM] unsigned char 
  1051 ;;  valorh          1   25[COMRAM] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  2   21[COMRAM] unsigned int 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1061 ;;      Params:         2       0       0       0       0       0       0       0       0
  1062 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1063 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1064 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1065 ;;Total ram usage:        8 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    3
  1068 ;; This function calls:
  1069 ;;		_itoa
  1070 ;;		_lcd_cmd
  1071 ;;		_lcd_str
  1072 ;;		_serial_rx
  1073 ;;		_serial_tx
  1074 ;; This function is called by:
  1075 ;;		_loop
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text6
  1080  000B46                     __ptext6:
  1081                           	opt stack 0
  1082  000B46                     _mostratemp:
  1083                           	opt stack 26
  1084                           
  1085                           ;exercicio3.c: 65: unsigned char valorh,valorl;
  1086                           ;exercicio3.c: 66: unsigned int valori;
  1087                           ;exercicio3.c: 67: serial_tx(0x31);
  1088                           
  1089                           ;incstack = 0
  1090  000B46  0E31               	movlw	49
  1091  000B48  EC46  F007         	call	_serial_tx
  1092                           
  1093                           ;exercicio3.c: 68: valorh = serial_rx(0);
  1094  000B4C  0E00               	movlw	0
  1095  000B4E  6E08               	movwf	serial_rx@timeout+1,c
  1096  000B50  0E00               	movlw	0
  1097  000B52  6E07               	movwf	serial_rx@timeout,c
  1098  000B54  EC70  F006         	call	_serial_rx	;wreg free
  1099  000B58  6E1A               	movwf	mostratemp@valorh,c
  1100                           
  1101                           ;exercicio3.c: 69: valorl = serial_rx(0);
  1102  000B5A  0E00               	movlw	0
  1103  000B5C  6E08               	movwf	serial_rx@timeout+1,c
  1104  000B5E  0E00               	movlw	0
  1105  000B60  6E07               	movwf	serial_rx@timeout,c
  1106  000B62  EC70  F006         	call	_serial_rx	;wreg free
  1107  000B66  6E1B               	movwf	mostratemp@valorl,c
  1108                           
  1109                           ;exercicio3.c: 70: valori = (valorh << 8) | valorl;
  1110  000B68  501B               	movf	mostratemp@valorl,w,c
  1111  000B6A  C01A  F018         	movff	mostratemp@valorh,??_mostratemp
  1112  000B6E  6A19               	clrf	(??_mostratemp+1)& (0+255),c
  1113  000B70  C018  F019         	movff	??_mostratemp,??_mostratemp+1
  1114  000B74  6A18               	clrf	??_mostratemp,c
  1115  000B76  1018               	iorwf	??_mostratemp,w,c
  1116  000B78  6E1C               	movwf	mostratemp@valori,c
  1117  000B7A  5019               	movf	??_mostratemp+1,w,c
  1118  000B7C  6E1D               	movwf	mostratemp@valori+1,c
  1119                           
  1120                           ;exercicio3.c: 71: lcd_cmd(0xC0+7);
  1121  000B7E  0EC7               	movlw	199
  1122  000B80  ECEB  F006         	call	_lcd_cmd
  1123                           
  1124                           ;exercicio3.c: 72: lcd_str(itoa(valori,buffer)+2);
  1125  000B84  C01C  F00D         	movff	mostratemp@valori,itoa@val
  1126  000B88  C01D  F00E         	movff	mostratemp@valori+1,itoa@val+1
  1127  000B8C  0E23               	movlw	low _buffer
  1128  000B8E  6E0F               	movwf	itoa@str,c
  1129  000B90  0E00               	movlw	high _buffer
  1130  000B92  6E10               	movwf	itoa@str+1,c
  1131  000B94  ECDD  F004         	call	_itoa	;wreg free
  1132  000B98  0E02               	movlw	2
  1133  000B9A  240D               	addwf	?_itoa,w,c
  1134  000B9C  6E11               	movwf	lcd_str@str,c
  1135  000B9E  0E00               	movlw	0
  1136  000BA0  200E               	addwfc	?_itoa+1,w,c
  1137  000BA2  6E12               	movwf	lcd_str@str+1,c
  1138  000BA4  EC65  F005         	call	_lcd_str	;wreg free
  1139                           
  1140                           ;exercicio3.c: 73: lcd_str("C");
  1141  000BA8  0E08               	movlw	low STR_3
  1142  000BAA  6E11               	movwf	lcd_str@str,c
  1143  000BAC  0E08               	movlw	high STR_3
  1144  000BAE  6E12               	movwf	lcd_str@str+1,c
  1145  000BB0  EC65  F005         	call	_lcd_str	;wreg free
  1146                           
  1147                           ;exercicio3.c: 75: return valori;
  1148  000BB4  C01C  F016         	movff	mostratemp@valori,?_mostratemp
  1149  000BB8  C01D  F017         	movff	mostratemp@valori+1,?_mostratemp+1
  1150  000BBC  0012               	return	
  1151  000BBE                     __end_of_mostratemp:
  1152                           	opt stack 0
  1153                           tblptru	equ	0xFF8
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           status	equ	0xFD8
  1157                           
  1158 ;; *************** function _serial_tx *****************
  1159 ;; Defined at:
  1160 ;;		line 60 in file "serial.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;  val             1    wreg     unsigned char 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;  val             1    0[COMRAM] unsigned char 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      void 
  1167 ;; Registers used:
  1168 ;;		wreg
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1174 ;;      Params:         0       0       0       0       0       0       0       0       0
  1175 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1177 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1178 ;;Total ram usage:        1 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; This function calls:
  1181 ;;		Nothing
  1182 ;; This function is called by:
  1183 ;;		_setup
  1184 ;;		_mostravol
  1185 ;;		_mostratemp
  1186 ;;		_loop
  1187 ;;		_serial_tx_str
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           	psect	text7
  1192  000E8C                     __ptext7:
  1193                           	opt stack 0
  1194  000E8C                     _serial_tx:
  1195                           	opt stack 29
  1196                           
  1197                           ;incstack = 0
  1198                           ;serial_tx@val stored from wreg
  1199  000E8C  6E01               	movwf	serial_tx@val,c
  1200                           
  1201                           ;serial.c: 62: TXREG=val;
  1202  000E8E  C001  FFAD         	movff	serial_tx@val,4013	;volatile
  1203  000E92                     l127:
  1204  000E92  B2AC               	btfsc	4012,1,c	;volatile
  1205  000E94  0012               	return	
  1206  000E96  D7FD               	goto	l127
  1207  000E98                     __end_of_serial_tx:
  1208                           	opt stack 0
  1209                           tblptru	equ	0xFF8
  1210                           postinc0	equ	0xFEE
  1211                           wreg	equ	0xFE8
  1212                           status	equ	0xFD8
  1213                           
  1214 ;; *************** function _serial_rx *****************
  1215 ;; Defined at:
  1216 ;;		line 77 in file "serial.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  timeout         2    6[COMRAM] unsigned int 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  to              2    8[COMRAM] unsigned int 
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      unsigned char 
  1223 ;; Registers used:
  1224 ;;		wreg, status,2, status,0, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1230 ;;      Params:         2       0       0       0       0       0       0       0       0
  1231 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1232 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1233 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1234 ;;Total ram usage:        4 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; Hardware stack levels required when called:    1
  1237 ;; This function calls:
  1238 ;;		_atraso_ms
  1239 ;; This function is called by:
  1240 ;;		_mostravol
  1241 ;;		_mostratemp
  1242 ;;		_loop
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text8
  1247  000CE0                     __ptext8:
  1248                           	opt stack 0
  1249  000CE0                     _serial_rx:
  1250                           	opt stack 28
  1251                           
  1252                           ;serial.c: 79: unsigned int to=0;
  1253                           
  1254                           ;incstack = 0
  1255  000CE0  0E00               	movlw	0
  1256  000CE2  6E0A               	movwf	serial_rx@to+1,c
  1257  000CE4  0E00               	movlw	0
  1258  000CE6  6E09               	movwf	serial_rx@to,c
  1259                           
  1260                           ;serial.c: 81: if(RCSTAbits.FERR || RCSTAbits.OERR)
  1261  000CE8  B4AB               	btfsc	4011,2,c	;volatile
  1262  000CEA  D002               	goto	l141
  1263  000CEC  A2AB               	btfss	4011,1,c	;volatile
  1264  000CEE  D00D               	goto	l1230
  1265  000CF0                     l141:
  1266                           
  1267                           ;serial.c: 82: {
  1268                           ;serial.c: 83: RCSTAbits.CREN=0;
  1269  000CF0  98AB               	bcf	4011,4,c	;volatile
  1270                           
  1271                           ;serial.c: 84: RCSTAbits.CREN=1;
  1272  000CF2  88AB               	bsf	4011,4,c	;volatile
  1273                           
  1274                           ;serial.c: 85: }
  1275                           ;serial.c: 87: while(((to < timeout)||(!timeout))&&(!PIR1bits.RCIF))
  1276  000CF4  D00A               	goto	l1230
  1277  000CF6                     l1226:
  1278                           
  1279                           ;serial.c: 88: {
  1280                           ;serial.c: 89: atraso_ms(20);
  1281  000CF6  0E00               	movlw	0
  1282  000CF8  6E02               	movwf	atraso_ms@valor+1,c
  1283  000CFA  0E14               	movlw	20
  1284  000CFC  6E01               	movwf	atraso_ms@valor,c
  1285  000CFE  ECB8  F006         	call	_atraso_ms	;wreg free
  1286                           
  1287                           ;serial.c: 90: to+=20;
  1288  000D02  0E14               	movlw	20
  1289  000D04  2609               	addwf	serial_rx@to,f,c
  1290  000D06  0E00               	movlw	0
  1291  000D08  220A               	addwfc	serial_rx@to+1,f,c
  1292  000D0A                     l1230:
  1293  000D0A  5007               	movf	serial_rx@timeout,w,c
  1294  000D0C  5C09               	subwf	serial_rx@to,w,c
  1295  000D0E  5008               	movf	serial_rx@timeout+1,w,c
  1296  000D10  580A               	subwfb	serial_rx@to+1,w,c
  1297  000D12  A0D8               	btfss	status,0,c
  1298  000D14  D004               	goto	l147
  1299  000D16  5007               	movf	serial_rx@timeout,w,c
  1300  000D18  1008               	iorwf	serial_rx@timeout+1,w,c
  1301  000D1A  A4D8               	btfss	status,2,c
  1302  000D1C  D002               	goto	l148
  1303  000D1E                     l147:
  1304  000D1E  AA9E               	btfss	3998,5,c	;volatile
  1305  000D20  D7EA               	goto	l1226
  1306  000D22                     l148:
  1307                           
  1308                           ;serial.c: 91: }
  1309                           ;serial.c: 92: if(PIR1bits.RCIF)
  1310  000D22  AA9E               	btfss	3998,5,c	;volatile
  1311  000D24  D002               	goto	l1240
  1312                           
  1313                           ;serial.c: 93: return RCREG;
  1314  000D26  50AE               	movf	4014,w,c	;volatile
  1315  000D28  0012               	return	
  1316  000D2A                     l1240:
  1317                           
  1318                           ;serial.c: 94: else
  1319                           ;serial.c: 95: return 0xA5;
  1320  000D2A  0EA5               	movlw	165
  1321  000D2C  0012               	return	
  1322  000D2E                     __end_of_serial_rx:
  1323                           	opt stack 0
  1324                           tblptru	equ	0xFF8
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           status	equ	0xFD8
  1328                           
  1329 ;; *************** function _itoa *****************
  1330 ;; Defined at:
  1331 ;;		line 26 in file "itoa.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;  val             2   12[COMRAM] unsigned int 
  1334 ;;  str             2   14[COMRAM] PTR unsigned char 
  1335 ;;		 -> buffer(6), 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;		None
  1338 ;; Return value:  Size  Location     Type
  1339 ;;                  2   12[COMRAM] PTR unsigned char 
  1340 ;; Registers used:
  1341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1342 ;; Tracked objects:
  1343 ;;		On entry : 0/0
  1344 ;;		On exit  : 0/0
  1345 ;;		Unchanged: 0/0
  1346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1347 ;;      Params:         4       0       0       0       0       0       0       0       0
  1348 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1350 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1351 ;;Total ram usage:        4 bytes
  1352 ;; Hardware stack levels used:    1
  1353 ;; Hardware stack levels required when called:    1
  1354 ;; This function calls:
  1355 ;;		___lwdiv
  1356 ;;		___lwmod
  1357 ;; This function is called by:
  1358 ;;		_mostravol
  1359 ;;		_mostratemp
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text9
  1364  0009BA                     __ptext9:
  1365                           	opt stack 0
  1366  0009BA                     _itoa:
  1367                           	opt stack 27
  1368                           
  1369                           ;itoa.c: 28: str[0]=(val/10000)+0x30;
  1370                           
  1371                           ;incstack = 0
  1372  0009BA  C00D  F006         	movff	itoa@val,___lwdiv@dividend
  1373  0009BE  C00E  F007         	movff	itoa@val+1,___lwdiv@dividend+1
  1374  0009C2  0E27               	movlw	39
  1375  0009C4  6E09               	movwf	___lwdiv@divisor+1,c
  1376  0009C6  0E10               	movlw	16
  1377  0009C8  6E08               	movwf	___lwdiv@divisor,c
  1378  0009CA  EC47  F006         	call	___lwdiv	;wreg free
  1379  0009CE  5006               	movf	?___lwdiv,w,c
  1380  0009D0  0F30               	addlw	48
  1381  0009D2  C00F  FFD9         	movff	itoa@str,fsr2l
  1382  0009D6  C010  FFDA         	movff	itoa@str+1,fsr2h
  1383  0009DA  6EDF               	movwf	indf2,c
  1384                           
  1385                           ;itoa.c: 29: str[1]=((val%10000)/1000)+0x30;
  1386  0009DC  EE20 F001          	lfsr	2,1
  1387  0009E0  500F               	movf	itoa@str,w,c
  1388  0009E2  26D9               	addwf	fsr2l,f,c
  1389  0009E4  5010               	movf	itoa@str+1,w,c
  1390  0009E6  22DA               	addwfc	fsr2h,f,c
  1391  0009E8  0E27               	movlw	39
  1392  0009EA  6E04               	movwf	___lwmod@divisor+1,c
  1393  0009EC  0E10               	movlw	16
  1394  0009EE  6E03               	movwf	___lwmod@divisor,c
  1395  0009F0  C00D  F001         	movff	itoa@val,___lwmod@dividend
  1396  0009F4  C00E  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1397  0009F8  EC97  F006         	call	___lwmod	;wreg free
  1398  0009FC  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1399  000A00  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1400  000A04  0E03               	movlw	3
  1401  000A06  6E09               	movwf	___lwdiv@divisor+1,c
  1402  000A08  0EE8               	movlw	232
  1403  000A0A  6E08               	movwf	___lwdiv@divisor,c
  1404  000A0C  EC47  F006         	call	___lwdiv	;wreg free
  1405  000A10  5006               	movf	?___lwdiv,w,c
  1406  000A12  0F30               	addlw	48
  1407  000A14  6EDF               	movwf	indf2,c
  1408                           
  1409                           ;itoa.c: 30: str[2]=((val%1000)/100)+0x30;
  1410  000A16  EE20 F002          	lfsr	2,2
  1411  000A1A  500F               	movf	itoa@str,w,c
  1412  000A1C  26D9               	addwf	fsr2l,f,c
  1413  000A1E  5010               	movf	itoa@str+1,w,c
  1414  000A20  22DA               	addwfc	fsr2h,f,c
  1415  000A22  0E03               	movlw	3
  1416  000A24  6E04               	movwf	___lwmod@divisor+1,c
  1417  000A26  0EE8               	movlw	232
  1418  000A28  6E03               	movwf	___lwmod@divisor,c
  1419  000A2A  C00D  F001         	movff	itoa@val,___lwmod@dividend
  1420  000A2E  C00E  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1421  000A32  EC97  F006         	call	___lwmod	;wreg free
  1422  000A36  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1423  000A3A  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1424  000A3E  0E00               	movlw	0
  1425  000A40  6E09               	movwf	___lwdiv@divisor+1,c
  1426  000A42  0E64               	movlw	100
  1427  000A44  6E08               	movwf	___lwdiv@divisor,c
  1428  000A46  EC47  F006         	call	___lwdiv	;wreg free
  1429  000A4A  5006               	movf	?___lwdiv,w,c
  1430  000A4C  0F30               	addlw	48
  1431  000A4E  6EDF               	movwf	indf2,c
  1432                           
  1433                           ;itoa.c: 31: str[3]=((val%100)/10)+0x30;
  1434  000A50  EE20 F003          	lfsr	2,3
  1435  000A54  500F               	movf	itoa@str,w,c
  1436  000A56  26D9               	addwf	fsr2l,f,c
  1437  000A58  5010               	movf	itoa@str+1,w,c
  1438  000A5A  22DA               	addwfc	fsr2h,f,c
  1439  000A5C  0E00               	movlw	0
  1440  000A5E  6E04               	movwf	___lwmod@divisor+1,c
  1441  000A60  0E64               	movlw	100
  1442  000A62  6E03               	movwf	___lwmod@divisor,c
  1443  000A64  C00D  F001         	movff	itoa@val,___lwmod@dividend
  1444  000A68  C00E  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1445  000A6C  EC97  F006         	call	___lwmod	;wreg free
  1446  000A70  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1447  000A74  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1448  000A78  0E00               	movlw	0
  1449  000A7A  6E09               	movwf	___lwdiv@divisor+1,c
  1450  000A7C  0E0A               	movlw	10
  1451  000A7E  6E08               	movwf	___lwdiv@divisor,c
  1452  000A80  EC47  F006         	call	___lwdiv	;wreg free
  1453  000A84  5006               	movf	?___lwdiv,w,c
  1454  000A86  0F30               	addlw	48
  1455  000A88  6EDF               	movwf	indf2,c
  1456                           
  1457                           ;itoa.c: 32: str[4]=(val%10)+0x30;
  1458  000A8A  EE20 F004          	lfsr	2,4
  1459  000A8E  500F               	movf	itoa@str,w,c
  1460  000A90  26D9               	addwf	fsr2l,f,c
  1461  000A92  5010               	movf	itoa@str+1,w,c
  1462  000A94  22DA               	addwfc	fsr2h,f,c
  1463  000A96  C00D  F001         	movff	itoa@val,___lwmod@dividend
  1464  000A9A  C00E  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1465  000A9E  0E00               	movlw	0
  1466  000AA0  6E04               	movwf	___lwmod@divisor+1,c
  1467  000AA2  0E0A               	movlw	10
  1468  000AA4  6E03               	movwf	___lwmod@divisor,c
  1469  000AA6  EC97  F006         	call	___lwmod	;wreg free
  1470  000AAA  5001               	movf	?___lwmod,w,c
  1471  000AAC  0F30               	addlw	48
  1472  000AAE  6EDF               	movwf	indf2,c
  1473                           
  1474                           ;itoa.c: 33: str[5]=0;
  1475  000AB0  EE20 F005          	lfsr	2,5
  1476  000AB4  500F               	movf	itoa@str,w,c
  1477  000AB6  26D9               	addwf	fsr2l,f,c
  1478  000AB8  5010               	movf	itoa@str+1,w,c
  1479  000ABA  22DA               	addwfc	fsr2h,f,c
  1480  000ABC  0E00               	movlw	0
  1481  000ABE  6EDF               	movwf	indf2,c
  1482                           
  1483                           ;itoa.c: 35: return str;
  1484  000AC0  C00F  F00D         	movff	itoa@str,?_itoa
  1485  000AC4  C010  F00E         	movff	itoa@str+1,?_itoa+1
  1486  000AC8  0012               	return	
  1487  000ACA                     __end_of_itoa:
  1488                           	opt stack 0
  1489                           tblptru	equ	0xFF8
  1490                           postinc0	equ	0xFEE
  1491                           wreg	equ	0xFE8
  1492                           indf2	equ	0xFDF
  1493                           fsr2h	equ	0xFDA
  1494                           fsr2l	equ	0xFD9
  1495                           status	equ	0xFD8
  1496                           
  1497 ;; *************** function ___lwmod *****************
  1498 ;; Defined at:
  1499 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  dividend        2    0[COMRAM] unsigned int 
  1502 ;;  divisor         2    2[COMRAM] unsigned int 
  1503 ;; Auto vars:     Size  Location     Type
  1504 ;;  counter         1    4[COMRAM] unsigned char 
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  2    0[COMRAM] unsigned int 
  1507 ;; Registers used:
  1508 ;;		wreg, status,2, status,0
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1514 ;;      Params:         4       0       0       0       0       0       0       0       0
  1515 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1517 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1518 ;;Total ram usage:        5 bytes
  1519 ;; Hardware stack levels used:    1
  1520 ;; This function calls:
  1521 ;;		Nothing
  1522 ;; This function is called by:
  1523 ;;		_itoa
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           	psect	text10
  1528  000D2E                     __ptext10:
  1529                           	opt stack 0
  1530  000D2E                     ___lwmod:
  1531                           	opt stack 27
  1532                           
  1533                           ;incstack = 0
  1534  000D2E  5003               	movf	___lwmod@divisor,w,c
  1535  000D30  1004               	iorwf	___lwmod@divisor+1,w,c
  1536  000D32  B4D8               	btfsc	status,2,c
  1537  000D34  D018               	goto	l585
  1538  000D36  0E01               	movlw	1
  1539  000D38  6E05               	movwf	___lwmod@counter,c
  1540  000D3A  D004               	goto	l1188
  1541  000D3C                     l1186:
  1542  000D3C  90D8               	bcf	status,0,c
  1543  000D3E  3603               	rlcf	___lwmod@divisor,f,c
  1544  000D40  3604               	rlcf	___lwmod@divisor+1,f,c
  1545  000D42  2A05               	incf	___lwmod@counter,f,c
  1546  000D44                     l1188:
  1547  000D44  AE04               	btfss	___lwmod@divisor+1,7,c
  1548  000D46  D7FA               	goto	l1186
  1549  000D48                     l1190:
  1550  000D48  5003               	movf	___lwmod@divisor,w,c
  1551  000D4A  5C01               	subwf	___lwmod@dividend,w,c
  1552  000D4C  5004               	movf	___lwmod@divisor+1,w,c
  1553  000D4E  5802               	subwfb	___lwmod@dividend+1,w,c
  1554  000D50  A0D8               	btfss	status,0,c
  1555  000D52  D004               	goto	l1194
  1556  000D54  5003               	movf	___lwmod@divisor,w,c
  1557  000D56  5E01               	subwf	___lwmod@dividend,f,c
  1558  000D58  5004               	movf	___lwmod@divisor+1,w,c
  1559  000D5A  5A02               	subwfb	___lwmod@dividend+1,f,c
  1560  000D5C                     l1194:
  1561  000D5C  90D8               	bcf	status,0,c
  1562  000D5E  3204               	rrcf	___lwmod@divisor+1,f,c
  1563  000D60  3203               	rrcf	___lwmod@divisor,f,c
  1564  000D62  2E05               	decfsz	___lwmod@counter,f,c
  1565  000D64  D7F1               	goto	l1190
  1566  000D66                     l585:
  1567  000D66  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1568  000D6A  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1569  000D6E  0012               	return		;funcret
  1570  000D70                     __end_of___lwmod:
  1571                           	opt stack 0
  1572                           tblptru	equ	0xFF8
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           indf2	equ	0xFDF
  1576                           fsr2h	equ	0xFDA
  1577                           fsr2l	equ	0xFD9
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function ___lwdiv *****************
  1581 ;; Defined at:
  1582 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;  dividend        2    5[COMRAM] unsigned int 
  1585 ;;  divisor         2    7[COMRAM] unsigned int 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  quotient        2    9[COMRAM] unsigned int 
  1588 ;;  counter         1   11[COMRAM] unsigned char 
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  2    5[COMRAM] unsigned int 
  1591 ;; Registers used:
  1592 ;;		wreg, status,2, status,0
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1598 ;;      Params:         4       0       0       0       0       0       0       0       0
  1599 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1600 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1601 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1602 ;;Total ram usage:        7 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; This function calls:
  1605 ;;		Nothing
  1606 ;; This function is called by:
  1607 ;;		_itoa
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text11
  1612  000C8E                     __ptext11:
  1613                           	opt stack 0
  1614  000C8E                     ___lwdiv:
  1615                           	opt stack 27
  1616                           
  1617                           ;incstack = 0
  1618  000C8E  0E00               	movlw	0
  1619  000C90  6E0B               	movwf	___lwdiv@quotient+1,c
  1620  000C92  0E00               	movlw	0
  1621  000C94  6E0A               	movwf	___lwdiv@quotient,c
  1622  000C96  5008               	movf	___lwdiv@divisor,w,c
  1623  000C98  1009               	iorwf	___lwdiv@divisor+1,w,c
  1624  000C9A  B4D8               	btfsc	status,2,c
  1625  000C9C  D01C               	goto	l575
  1626  000C9E  0E01               	movlw	1
  1627  000CA0  6E0C               	movwf	___lwdiv@counter,c
  1628  000CA2  D004               	goto	l1168
  1629  000CA4                     l1166:
  1630  000CA4  90D8               	bcf	status,0,c
  1631  000CA6  3608               	rlcf	___lwdiv@divisor,f,c
  1632  000CA8  3609               	rlcf	___lwdiv@divisor+1,f,c
  1633  000CAA  2A0C               	incf	___lwdiv@counter,f,c
  1634  000CAC                     l1168:
  1635  000CAC  AE09               	btfss	___lwdiv@divisor+1,7,c
  1636  000CAE  D7FA               	goto	l1166
  1637  000CB0                     l1170:
  1638  000CB0  90D8               	bcf	status,0,c
  1639  000CB2  360A               	rlcf	___lwdiv@quotient,f,c
  1640  000CB4  360B               	rlcf	___lwdiv@quotient+1,f,c
  1641  000CB6  5008               	movf	___lwdiv@divisor,w,c
  1642  000CB8  5C06               	subwf	___lwdiv@dividend,w,c
  1643  000CBA  5009               	movf	___lwdiv@divisor+1,w,c
  1644  000CBC  5807               	subwfb	___lwdiv@dividend+1,w,c
  1645  000CBE  A0D8               	btfss	status,0,c
  1646  000CC0  D005               	goto	l1178
  1647  000CC2  5008               	movf	___lwdiv@divisor,w,c
  1648  000CC4  5E06               	subwf	___lwdiv@dividend,f,c
  1649  000CC6  5009               	movf	___lwdiv@divisor+1,w,c
  1650  000CC8  5A07               	subwfb	___lwdiv@dividend+1,f,c
  1651  000CCA  800A               	bsf	___lwdiv@quotient,0,c
  1652  000CCC                     l1178:
  1653  000CCC  90D8               	bcf	status,0,c
  1654  000CCE  3209               	rrcf	___lwdiv@divisor+1,f,c
  1655  000CD0  3208               	rrcf	___lwdiv@divisor,f,c
  1656  000CD2  2E0C               	decfsz	___lwdiv@counter,f,c
  1657  000CD4  D7ED               	goto	l1170
  1658  000CD6                     l575:
  1659  000CD6  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  1660  000CDA  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1661  000CDE  0012               	return		;funcret
  1662  000CE0                     __end_of___lwdiv:
  1663                           	opt stack 0
  1664                           tblptru	equ	0xFF8
  1665                           postinc0	equ	0xFEE
  1666                           wreg	equ	0xFE8
  1667                           indf2	equ	0xFDF
  1668                           fsr2h	equ	0xFDA
  1669                           fsr2l	equ	0xFD9
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function _etapa *****************
  1673 ;; Defined at:
  1674 ;;		line 46 in file "exercicio3.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  num             2   21[COMRAM] int 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1688 ;;      Params:         2       0       0       0       0       0       0       0       0
  1689 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1690 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1691 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1692 ;;Total ram usage:        2 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    3
  1695 ;; This function calls:
  1696 ;;		_lcd_cmd
  1697 ;;		_lcd_dat
  1698 ;;		_lcd_str
  1699 ;; This function is called by:
  1700 ;;		_loop
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text12
  1705  000E46                     __ptext12:
  1706                           	opt stack 0
  1707  000E46                     _etapa:
  1708                           	opt stack 26
  1709                           
  1710                           ;exercicio3.c: 47: lcd_cmd(0x80);
  1711                           
  1712                           ;incstack = 0
  1713  000E46  0E80               	movlw	128
  1714  000E48  ECEB  F006         	call	_lcd_cmd
  1715                           
  1716                           ;exercicio3.c: 48: lcd_str("Etapa ");
  1717  000E4C  0E01               	movlw	low STR_1
  1718  000E4E  6E11               	movwf	lcd_str@str,c
  1719  000E50  0E08               	movlw	high STR_1
  1720  000E52  6E12               	movwf	lcd_str@str+1,c
  1721  000E54  EC65  F005         	call	_lcd_str	;wreg free
  1722                           
  1723                           ;exercicio3.c: 49: lcd_dat(num+0x30);
  1724  000E58  5016               	movf	etapa@num,w,c
  1725  000E5A  0F30               	addlw	48
  1726  000E5C  ECD6  F006         	call	_lcd_dat
  1727  000E60  0012               	return		;funcret
  1728  000E62                     __end_of_etapa:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           indf2	equ	0xFDF
  1734                           fsr2h	equ	0xFDA
  1735                           fsr2l	equ	0xFD9
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _lcd_str *****************
  1739 ;; Defined at:
  1740 ;;		line 76 in file "lcd.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  str             2   16[COMRAM] PTR const unsigned char 
  1743 ;;		 -> STR_3(2), STR_2(2), buffer(6), STR_1(7), 
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;  i               1   20[COMRAM] unsigned char 
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      void 
  1748 ;; Registers used:
  1749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1755 ;;      Params:         2       0       0       0       0       0       0       0       0
  1756 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1757 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1758 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1759 ;;Total ram usage:        5 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    2
  1762 ;; This function calls:
  1763 ;;		_lcd_dat
  1764 ;; This function is called by:
  1765 ;;		_etapa
  1766 ;;		_mostravol
  1767 ;;		_mostratemp
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text13
  1772  000ACA                     __ptext13:
  1773                           	opt stack 0
  1774  000ACA                     _lcd_str:
  1775                           	opt stack 26
  1776                           
  1777                           ;lcd.c: 78: unsigned char i=0;
  1778                           
  1779                           ;incstack = 0
  1780  000ACA  0E00               	movlw	0
  1781  000ACC  6E15               	movwf	lcd_str@i,c
  1782                           
  1783                           ;lcd.c: 80: while(str[i] != 0 )
  1784  000ACE  D01D               	goto	l1218
  1785  000AD0                     l1214:
  1786                           
  1787                           ;lcd.c: 81: {
  1788                           ;lcd.c: 82: lcd_dat(str[i]);
  1789  000AD0  5015               	movf	lcd_str@i,w,c
  1790  000AD2  0D01               	mullw	1
  1791  000AD4  C011  F013         	movff	lcd_str@str,??_lcd_str
  1792  000AD8  C012  F014         	movff	lcd_str@str+1,??_lcd_str+1
  1793  000ADC  50F3               	movf	prodl,w,c
  1794  000ADE  2613               	addwf	??_lcd_str,f,c
  1795  000AE0  50F4               	movf	prodh,w,c
  1796  000AE2  2214               	addwfc	??_lcd_str+1,f,c
  1797  000AE4  C013  FFF6         	movff	??_lcd_str,tblptrl
  1798  000AE8  C014  FFF7         	movff	??_lcd_str+1,tblptrh
  1799  000AEC  6AF8               	clrf	tblptru,c
  1800  000AEE  0E07               	movlw	(high __ramtop+-1)
  1801  000AF0  64F7               	cpfsgt	tblptrh,c
  1802  000AF2  D003               	bra	u397
  1803  000AF4  0008               	tblrd		*
  1804  000AF6  50F5               	movf	tablat,w,c
  1805  000AF8  D005               	bra	u390
  1806  000AFA                     u397:
  1807  000AFA  CFF6 FFE9          	movff	tblptrl,fsr0l
  1808  000AFE  CFF7 FFEA          	movff	tblptrh,fsr0h
  1809  000B02  50EF               	movf	indf0,w,c
  1810  000B04                     u390:
  1811  000B04  ECD6  F006         	call	_lcd_dat
  1812                           
  1813                           ;lcd.c: 83: i++;
  1814  000B08  2A15               	incf	lcd_str@i,f,c
  1815  000B0A                     l1218:
  1816  000B0A  5015               	movf	lcd_str@i,w,c
  1817  000B0C  0D01               	mullw	1
  1818  000B0E  C011  F013         	movff	lcd_str@str,??_lcd_str
  1819  000B12  C012  F014         	movff	lcd_str@str+1,??_lcd_str+1
  1820  000B16  50F3               	movf	prodl,w,c
  1821  000B18  2613               	addwf	??_lcd_str,f,c
  1822  000B1A  50F4               	movf	prodh,w,c
  1823  000B1C  2214               	addwfc	??_lcd_str+1,f,c
  1824  000B1E  C013  FFF6         	movff	??_lcd_str,tblptrl
  1825  000B22  C014  FFF7         	movff	??_lcd_str+1,tblptrh
  1826  000B26  6AF8               	clrf	tblptru,c
  1827  000B28  0E07               	movlw	(high __ramtop+-1)
  1828  000B2A  64F7               	cpfsgt	tblptrh,c
  1829  000B2C  D003               	bra	u407
  1830  000B2E  0008               	tblrd		*
  1831  000B30  50F5               	movf	tablat,w,c
  1832  000B32  D005               	bra	u400
  1833  000B34                     u407:
  1834  000B34  CFF6 FFE9          	movff	tblptrl,fsr0l
  1835  000B38  CFF7 FFEA          	movff	tblptrh,fsr0h
  1836  000B3C  50EF               	movf	indf0,w,c
  1837  000B3E                     u400:
  1838  000B3E  0900               	iorlw	0
  1839  000B40  B4D8               	btfsc	status,2,c
  1840  000B42  0012               	return	
  1841  000B44  D7C5               	goto	l1214
  1842  000B46                     __end_of_lcd_str:
  1843                           	opt stack 0
  1844                           tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           prodh	equ	0xFF4
  1849                           prodl	equ	0xFF3
  1850                           indf0	equ	0xFEF
  1851                           postinc0	equ	0xFEE
  1852                           fsr0h	equ	0xFEA
  1853                           fsr0l	equ	0xFE9
  1854                           wreg	equ	0xFE8
  1855                           indf2	equ	0xFDF
  1856                           fsr2h	equ	0xFDA
  1857                           fsr2l	equ	0xFD9
  1858                           status	equ	0xFD8
  1859                           
  1860 ;; *************** function _lcd_dat *****************
  1861 ;; Defined at:
  1862 ;;		line 46 in file "lcd.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;  val             1    wreg     unsigned char 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  val             1    6[COMRAM] unsigned char 
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, status,2, status,0, cstack
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0
  1877 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1878 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1879 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1880 ;;Total ram usage:        1 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    1
  1883 ;; This function calls:
  1884 ;;		_atraso_ms
  1885 ;;		_lcd_wr
  1886 ;; This function is called by:
  1887 ;;		_etapa
  1888 ;;		_lcd_str
  1889 ;;		_lcd_custom
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text14
  1894  000DAC                     __ptext14:
  1895                           	opt stack 0
  1896  000DAC                     _lcd_dat:
  1897                           	opt stack 26
  1898                           
  1899                           ;incstack = 0
  1900                           ;lcd_dat@val stored from wreg
  1901  000DAC  6E07               	movwf	lcd_dat@val,c
  1902                           
  1903                           ;lcd.c: 48: PORTEbits.RE1=1;
  1904  000DAE  8284               	bsf	3972,1,c	;volatile
  1905                           
  1906                           ;lcd.c: 49: lcd_wr(val);
  1907  000DB0  5007               	movf	lcd_dat@val,w,c
  1908  000DB2  EC4C  F007         	call	_lcd_wr
  1909                           
  1910                           ;lcd.c: 50: PORTEbits.RE2=1;
  1911  000DB6  8484               	bsf	3972,2,c	;volatile
  1912                           
  1913                           ;lcd.c: 51: atraso_ms(3);
  1914  000DB8  0E00               	movlw	0
  1915  000DBA  6E02               	movwf	atraso_ms@valor+1,c
  1916  000DBC  0E03               	movlw	3
  1917  000DBE  6E01               	movwf	atraso_ms@valor,c
  1918  000DC0  ECB8  F006         	call	_atraso_ms	;wreg free
  1919                           
  1920                           ;lcd.c: 52: PORTEbits.RE1=0;
  1921  000DC4  9284               	bcf	3972,1,c	;volatile
  1922                           
  1923                           ;lcd.c: 53: atraso_ms(3);
  1924  000DC6  0E00               	movlw	0
  1925  000DC8  6E02               	movwf	atraso_ms@valor+1,c
  1926  000DCA  0E03               	movlw	3
  1927  000DCC  6E01               	movwf	atraso_ms@valor,c
  1928  000DCE  ECB8  F006         	call	_atraso_ms	;wreg free
  1929                           
  1930                           ;lcd.c: 54: PORTEbits.RE1=1;
  1931  000DD2  8284               	bsf	3972,1,c	;volatile
  1932  000DD4  0012               	return		;funcret
  1933  000DD6                     __end_of_lcd_dat:
  1934                           	opt stack 0
  1935                           tblptru	equ	0xFF8
  1936                           tblptrh	equ	0xFF7
  1937                           tblptrl	equ	0xFF6
  1938                           tablat	equ	0xFF5
  1939                           prodh	equ	0xFF4
  1940                           prodl	equ	0xFF3
  1941                           indf0	equ	0xFEF
  1942                           postinc0	equ	0xFEE
  1943                           fsr0h	equ	0xFEA
  1944                           fsr0l	equ	0xFE9
  1945                           wreg	equ	0xFE8
  1946                           indf2	equ	0xFDF
  1947                           fsr2h	equ	0xFDA
  1948                           fsr2l	equ	0xFD9
  1949                           status	equ	0xFD8
  1950                           
  1951 ;; *************** function _lcd_cmd *****************
  1952 ;; Defined at:
  1953 ;;		line 35 in file "lcd.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  val             1    wreg     unsigned char 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;  val             1    6[COMRAM] unsigned char 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      void 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0, cstack
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1967 ;;      Params:         0       0       0       0       0       0       0       0       0
  1968 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1969 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1970 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1971 ;;Total ram usage:        1 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    1
  1974 ;; This function calls:
  1975 ;;		_atraso_ms
  1976 ;;		_lcd_wr
  1977 ;; This function is called by:
  1978 ;;		_setup
  1979 ;;		_etapa
  1980 ;;		_mostravol
  1981 ;;		_mostratemp
  1982 ;;		_lcd_init
  1983 ;;		_lcd_custom
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text15
  1988  000DD6                     __ptext15:
  1989                           	opt stack 0
  1990  000DD6                     _lcd_cmd:
  1991                           	opt stack 27
  1992                           
  1993                           ;incstack = 0
  1994                           ;lcd_cmd@val stored from wreg
  1995  000DD6  6E07               	movwf	lcd_cmd@val,c
  1996                           
  1997                           ;lcd.c: 37: PORTEbits.RE1=1;
  1998  000DD8  8284               	bsf	3972,1,c	;volatile
  1999                           
  2000                           ;lcd.c: 38: lcd_wr(val);
  2001  000DDA  5007               	movf	lcd_cmd@val,w,c
  2002  000DDC  EC4C  F007         	call	_lcd_wr
  2003                           
  2004                           ;lcd.c: 39: PORTEbits.RE2=0;
  2005  000DE0  9484               	bcf	3972,2,c	;volatile
  2006                           
  2007                           ;lcd.c: 40: atraso_ms(3);
  2008  000DE2  0E00               	movlw	0
  2009  000DE4  6E02               	movwf	atraso_ms@valor+1,c
  2010  000DE6  0E03               	movlw	3
  2011  000DE8  6E01               	movwf	atraso_ms@valor,c
  2012  000DEA  ECB8  F006         	call	_atraso_ms	;wreg free
  2013                           
  2014                           ;lcd.c: 41: PORTEbits.RE1=0;
  2015  000DEE  9284               	bcf	3972,1,c	;volatile
  2016                           
  2017                           ;lcd.c: 42: atraso_ms(3);
  2018  000DF0  0E00               	movlw	0
  2019  000DF2  6E02               	movwf	atraso_ms@valor+1,c
  2020  000DF4  0E03               	movlw	3
  2021  000DF6  6E01               	movwf	atraso_ms@valor,c
  2022  000DF8  ECB8  F006         	call	_atraso_ms	;wreg free
  2023                           
  2024                           ;lcd.c: 43: PORTEbits.RE1=1;
  2025  000DFC  8284               	bsf	3972,1,c	;volatile
  2026  000DFE  0012               	return		;funcret
  2027  000E00                     __end_of_lcd_cmd:
  2028                           	opt stack 0
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           prodh	equ	0xFF4
  2034                           prodl	equ	0xFF3
  2035                           indf0	equ	0xFEF
  2036                           postinc0	equ	0xFEE
  2037                           fsr0h	equ	0xFEA
  2038                           fsr0l	equ	0xFE9
  2039                           wreg	equ	0xFE8
  2040                           indf2	equ	0xFDF
  2041                           fsr2h	equ	0xFDA
  2042                           fsr2l	equ	0xFD9
  2043                           status	equ	0xFD8
  2044                           
  2045 ;; *************** function _lcd_wr *****************
  2046 ;; Defined at:
  2047 ;;		line 30 in file "lcd.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;  val             1    wreg     unsigned char 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;  val             1    0[COMRAM] unsigned char 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2061 ;;      Params:         0       0       0       0       0       0       0       0       0
  2062 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2064 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2065 ;;Total ram usage:        1 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_lcd_cmd
  2071 ;;		_lcd_dat
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text16
  2076  000E98                     __ptext16:
  2077                           	opt stack 0
  2078  000E98                     _lcd_wr:
  2079                           	opt stack 27
  2080                           
  2081                           ;incstack = 0
  2082                           ;lcd_wr@val stored from wreg
  2083  000E98  6E01               	movwf	lcd_wr@val,c
  2084                           
  2085                           ;lcd.c: 32: PORTD=val;
  2086  000E9A  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  2087  000E9E  0012               	return		;funcret
  2088  000EA0                     __end_of_lcd_wr:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           prodh	equ	0xFF4
  2095                           prodl	equ	0xFF3
  2096                           indf0	equ	0xFEF
  2097                           postinc0	equ	0xFEE
  2098                           fsr0h	equ	0xFEA
  2099                           fsr0l	equ	0xFE9
  2100                           wreg	equ	0xFE8
  2101                           indf2	equ	0xFDF
  2102                           fsr2h	equ	0xFDA
  2103                           fsr2l	equ	0xFD9
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _atraso_ms *****************
  2107 ;; Defined at:
  2108 ;;		line 31 in file "atraso.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;  valor           2    0[COMRAM] unsigned int 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  i               2    2[COMRAM] unsigned int 
  2113 ;;  j2              1    5[COMRAM] volatile unsigned char 
  2114 ;;  j1              1    4[COMRAM] volatile unsigned char 
  2115 ;; Return value:  Size  Location     Type
  2116 ;;                  1    wreg      void 
  2117 ;; Registers used:
  2118 ;;		wreg, status,2, status,0
  2119 ;; Tracked objects:
  2120 ;;		On entry : 0/0
  2121 ;;		On exit  : 0/0
  2122 ;;		Unchanged: 0/0
  2123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2124 ;;      Params:         2       0       0       0       0       0       0       0       0
  2125 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2126 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2127 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2128 ;;Total ram usage:        6 bytes
  2129 ;; Hardware stack levels used:    1
  2130 ;; This function calls:
  2131 ;;		Nothing
  2132 ;; This function is called by:
  2133 ;;		_loop
  2134 ;;		_lcd_cmd
  2135 ;;		_lcd_dat
  2136 ;;		_lcd_init
  2137 ;;		_serial_rx
  2138 ;;		_serial_rx_str
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text17
  2143  000D70                     __ptext17:
  2144                           	opt stack 0
  2145  000D70                     _atraso_ms:
  2146                           	opt stack 27
  2147                           
  2148                           ;atraso.c: 33: unsigned int i;
  2149                           ;atraso.c: 34: volatile unsigned char j1;
  2150                           ;atraso.c: 35: volatile unsigned char j2=0;
  2151                           
  2152                           ;incstack = 0
  2153  000D70  0E00               	movlw	0
  2154  000D72  6E06               	movwf	atraso_ms@j2,c	;volatile
  2155                           
  2156                           ;atraso.c: 37: for (i =0; i< valor; i++)
  2157  000D74  0E00               	movlw	0
  2158  000D76  6E04               	movwf	atraso_ms@i+1,c
  2159  000D78  0E00               	movlw	0
  2160  000D7A  6E03               	movwf	atraso_ms@i,c
  2161  000D7C  D010               	goto	l1144
  2162  000D7E                     l1140:
  2163                           
  2164                           ;atraso.c: 38: {
  2165                           ;atraso.c: 39: j1=(8000000/(4000l*50));
  2166  000D7E  0E28               	movlw	40
  2167  000D80  6E05               	movwf	atraso_ms@j1,c	;volatile
  2168  000D82                     l1:
  2169  000D82  0E09               	movlw	9	; 20 j1 ;# 
  2170  000D84  6F06               	movwf	atraso_ms@j2,b	; 20 j1 ;# 
  2171  000D86  F000               	nop		; 180 j2j1 ;# 
  2172  000D88  F000               	nop		; 180 j2j1 ;# 
  2173  000D8A  2F06               	decfsz	atraso_ms@j2,f,b	; 160 j2j1 -j1 ;# 
  2174                           
  2175                           ; 40 2j1 ;# 
  2176  000D8C  EFC4  F006         	goto	($+-3)	; 320 2j2j1 -2j1 ;# 
  2177  000D90  F000               	nop		; 20 j1 ;# 
  2178  000D92  2F05               	decfsz	atraso_ms@j1,f,b	; 19 j1 -1 ;# 
  2179                           
  2180                           ; 2 2 ;# 
  2181  000D94  EFC1  F006         	goto	l1	; 38 2j1 -2 ;# 
  2182  000D98  F000               	nop		; 1 1 ;# 
  2183  000D9A  4A03               	infsnz	atraso_ms@i,f,c
  2184  000D9C  2A04               	incf	atraso_ms@i+1,f,c
  2185  000D9E                     l1144:
  2186  000D9E  5001               	movf	atraso_ms@valor,w,c
  2187  000DA0  5C03               	subwf	atraso_ms@i,w,c
  2188  000DA2  5002               	movf	atraso_ms@valor+1,w,c
  2189  000DA4  5804               	subwfb	atraso_ms@i+1,w,c
  2190  000DA6  B0D8               	btfsc	status,0,c
  2191  000DA8  0012               	return	
  2192  000DAA  D7E9               	goto	l1140
  2193  000DAC                     __end_of_atraso_ms:
  2194                           	opt stack 0
  2195                           tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           tblptrl	equ	0xFF6
  2198                           tablat	equ	0xFF5
  2199                           prodh	equ	0xFF4
  2200                           prodl	equ	0xFF3
  2201                           indf0	equ	0xFEF
  2202                           postinc0	equ	0xFEE
  2203                           fsr0h	equ	0xFEA
  2204                           fsr0l	equ	0xFE9
  2205                           wreg	equ	0xFE8
  2206                           indf2	equ	0xFDF
  2207                           fsr2h	equ	0xFDA
  2208                           fsr2l	equ	0xFD9
  2209                           status	equ	0xFD8
  2210                           tblptru	equ	0xFF8
  2211                           tblptrh	equ	0xFF7
  2212                           tblptrl	equ	0xFF6
  2213                           tablat	equ	0xFF5
  2214                           prodh	equ	0xFF4
  2215                           prodl	equ	0xFF3
  2216                           indf0	equ	0xFEF
  2217                           postinc0	equ	0xFEE
  2218                           fsr0h	equ	0xFEA
  2219                           fsr0l	equ	0xFE9
  2220                           wreg	equ	0xFE8
  2221                           indf2	equ	0xFDF
  2222                           fsr2h	equ	0xFDA
  2223                           fsr2l	equ	0xFD9
  2224                           status	equ	0xFD8
  2225                           
  2226                           	psect	rparam
  2227  0000                     tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           indf0	equ	0xFEF
  2234                           postinc0	equ	0xFEE
  2235                           fsr0h	equ	0xFEA
  2236                           fsr0l	equ	0xFE9
  2237                           wreg	equ	0xFE8
  2238                           indf2	equ	0xFDF
  2239                           fsr2h	equ	0xFDA
  2240                           fsr2l	equ	0xFD9
  2241                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     31      40
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    itoa@str	PTR unsigned char  size(2) Largest target is 6
		 -> buffer(COMRAM[6]), 

    sp__serial_rx_str	PTR unsigned char  size(2) Largest target is 0

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[2]), STR_2(CODE[2]), buffer(COMRAM[6]), STR_1(CODE[7]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 6
		 -> buffer(COMRAM[6]), 


Critical Paths under _main in COMRAM

    _main->_loop
    _setup->_lcd_cmd
    _lcd_init->_lcd_cmd
    _loop->_mostratemp
    _loop->_mostravol
    _mostravol->_lcd_str
    _mostratemp->_lcd_str
    _serial_rx->_atraso_ms
    _itoa->___lwdiv
    ___lwdiv->___lwmod
    _etapa->_lcd_str
    _lcd_str->_itoa
    _lcd_dat->_atraso_ms
    _lcd_cmd->_atraso_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   17249
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    2153
                            _lcd_cmd
                           _lcd_init
                        _serial_init
                          _serial_tx
 ---------------------------------------------------------------------------------
 (2) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0    1413
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _loop                                                 2     2      0   15096
                                             29 COMRAM     2     2      0
                          _atraso_ms
                              _etapa
                         _mostratemp
                          _mostravol
                          _serial_rx
                          _serial_tx
 ---------------------------------------------------------------------------------
 (2) _mostravol                                            8     6      2    5035
                                             21 COMRAM     8     6      2
                               _itoa
                            _lcd_cmd
                            _lcd_str
                          _serial_rx
                          _serial_tx
 ---------------------------------------------------------------------------------
 (2) _mostratemp                                           8     6      2    5035
                                             21 COMRAM     8     6      2
                               _itoa
                            _lcd_cmd
                            _lcd_str
                          _serial_rx
                          _serial_tx
 ---------------------------------------------------------------------------------
 (2) _serial_tx                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _serial_rx                                            4     2      2    1204
                                              6 COMRAM     4     2      2
                          _atraso_ms
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 4     0      4    1865
                                             12 COMRAM     4     0      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     671
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     674
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _etapa                                                2     0      2    3119
                                             21 COMRAM     2     0      2
                            _lcd_cmd
                            _lcd_dat
                            _lcd_str
 ---------------------------------------------------------------------------------
 (3) _lcd_str                                              5     3      2    1135
                                             16 COMRAM     5     3      2
                               _itoa (ARG)
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (4) _lcd_dat                                              1     1      0     725
                                              6 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              1     1      0     725
                                              6 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (4) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _atraso_ms                                            6     4      2     688
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _atraso_ms
     _etapa
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_str
         _itoa (ARG)
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
         _lcd_dat (ARG)
           _atraso_ms
           _lcd_wr
     _mostratemp
       _itoa
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _itoa (ARG)
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
         _lcd_dat (ARG)
           _atraso_ms
           _lcd_wr
       _serial_rx
         _atraso_ms
       _serial_tx
     _mostravol
       _itoa
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _itoa (ARG)
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
         _lcd_dat (ARG)
           _atraso_ms
           _lcd_wr
       _serial_rx
         _atraso_ms
       _serial_tx
     _serial_rx
       _atraso_ms
     _serial_tx
   _setup
     _lcd_cmd
       _atraso_ms
       _lcd_wr
     _lcd_init
       _atraso_ms
       _lcd_cmd
         _atraso_ms
         _lcd_wr
     _serial_init
     _serial_tx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1F      28       1       42.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      28      20        0.0%
DATA                 0      0      28       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Jun 21 21:36:31 2017

                      l1 0D82              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l141 0CF0                      l127 0E92                      l147 0D1E  
                    l148 0D22                      l575 0CD6                      l585 0D66  
           __CFG_CPB$OFF 000000                      u400 0B3E                      u407 0B34  
           __CFG_CPD$OFF 000000                      u390 0B04                      u397 0AFA  
           __CFG_BOR$OFF 000000                      wreg 000FE8             __CFG_FOSC$HS 000000  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1140 0D7E  
                   l1214 0AD0                     l1230 0D0A                     l1144 0D9E  
                   l1240 0D2A                     l1400 098A                     l1218 0B0A  
                   l1170 0CB0                     l1226 0CF6                     l1166 0CA4  
                   l1190 0D48                     l1318 0832                     l1168 0CAC  
                   l1416 0E40                     l1178 0CCC                     l1194 0D5C  
                   l1186 0D3C                     l1188 0D44                     l1348 08A2  
                   l1376 0914                     l1388 0956                     STR_1 0801  
                   STR_2 080A                     STR_3 0808                     _main 0E24  
                   _itoa 09BA                     _loop 080E                     fsr0h 000FEA  
                   indf0 000FEF                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000         serial_rx@timeout 0007             ___param_bank 000000  
          __CFG_PLLDIV$2 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  ?_itoa 000D                    ?_loop 0001              atraso_ms@j1 0005  
            atraso_ms@j2 0006          __end_of___lwdiv 0CE0          __end_of___lwmod 0D70  
                  _RCREG 000FAE                    _SPBRG 000FAF                    _PORTD 000F83  
          __CFG_USBDIV$2 000000                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
                  _TXREG 000FAD            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000          __end_of_lcd_dat 0DD6  
        __end_of_lcd_cmd 0E00            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
        __end_of_lcd_str 0B46            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _etapa 0E46                    _valor 0022                    _setup 0E00  
                  tablat 000FF5                    status 000FD8           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000          __initialization 0E62             __end_of_main 0E46  
           __end_of_itoa 0ACA             __end_of_loop 09BA                   ??_main 0020  
                 ??_itoa 0011                   ??_loop 001E            __activetblptr 000002  
                 _ADCON1 000FC1                   ?_etapa 0016                   ?_setup 0001  
         __CFG_XINST$OFF 000000             ?_serial_init 0001         __end_of_lcd_init 0C8E  
              ??___lwdiv 000A                ??___lwmod 0005                   _buffer 0023  
                 _lcd_wr 0E98                   clear_0 0E68                ??_lcd_dat 0007  
              ??_lcd_cmd 0007                ??_lcd_str 0013             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 0E6E            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_etapa 0E62            __end_of_setup 0E24  
                ??_etapa 0018                  ??_setup 0008       __size_of_atraso_ms 003C  
          _volume_maximo 0020                  ?_lcd_wr 0001       __size_of_serial_rx 004E  
     __size_of_serial_tx 000C       __size_of_mostravol 0074                ?_lcd_init 0001  
        __CFG_VREGEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
                ___lwdiv 0C8E                  ___lwmod 0D2E     __size_of_serial_init 0014  
      __end_of_atraso_ms 0DAC             __psmallconst 0800          __size_of_lcd_wr 0008  
        __CFG_STVREN$OFF 000000                  __pcinit 0E62                  __ramtop 0800  
                __ptext0 0E24                  __ptext1 0E00                  __ptext2 0E78  
                __ptext3 0C32                  __ptext4 080E                  __ptext5 0BBE  
                __ptext6 0B46                  __ptext7 0E8C                  __ptext8 0CE0  
                __ptext9 09BA                  _lcd_dat 0DAC                  _lcd_cmd 0DD6  
                _lcd_str 0ACA              serial_rx@to 0009               ??_lcd_init 0008  
   end_of_initialization 0E6E                  itoa@val 000D            __Lmediumconst 0000  
                itoa@str 000F        __end_of_serial_rx 0D2E        __end_of_serial_tx 0E98  
      __end_of_mostravol 0C32                _RCSTAbits 000FAB                  postinc0 000FEE  
             _mostratemp 0B46                _PORTEbits 000F84                _TRISCbits 000F94  
             lcd_dat@val 0007               lcd_cmd@val 0007                _TXSTAbits 000FAC  
             lcd_str@str 0011               atraso_ms@i 0003           __end_of_lcd_wr 0EA0  
    start_initialization 0E62                 ??_lcd_wr 0001         __CFG_LPT1OSC$OFF 000000  
            ?_mostratemp 0016              __pbssCOMRAM 0020        __size_of_lcd_init 005C  
       ___lwdiv@dividend 0006                 ?___lwdiv 0006                 ?___lwmod 0001  
               ?_lcd_dat 0001                 ?_lcd_cmd 0001                 ?_lcd_str 0011  
              _atraso_ms 0D70              __smallconst 0800         ___lwdiv@quotient 000A  
         __size_of_etapa 001C           __size_of_setup 0024           atraso_ms@valor 0001  
    __size_of_mostratemp 0078                 _PIR1bits 000F9E            ??_serial_init 0001  
              _serial_rx 0CE0                _serial_tx 0E8C         __CFG_WDTPS$32768 000000  
              _mostravol 0BBE               ?_atraso_ms 0001                lcd_wr@val 0001  
       mostratemp@valorh 001A         mostratemp@valori 001C         mostratemp@valorl 001B  
               __Hrparam 0000                 __Lrparam 0000               ?_serial_rx 0007  
             ?_serial_tx 0001               ?_mostravol 0016         __size_of___lwdiv 0052  
       __size_of___lwmod 0042      __end_of_serial_init 0E8C         __size_of_lcd_dat 002A  
       __size_of_lcd_cmd 002A         __size_of_lcd_str 007C          ___lwdiv@divisor 0008  
        ___lwdiv@counter 000C                 __ptext10 0D2E                 __ptext11 0C8E  
               __ptext12 0E46                 __ptext13 0ACA                 __ptext14 0DAC  
               __ptext15 0DD6                 __ptext16 0E98                 __ptext17 0D70  
               _lcd_init 0C32            __size_of_main 0022            __size_of_itoa 0110  
          __size_of_loop 01AC             serial_tx@val 0001             ??_mostratemp 0018  
               lcd_str@i 0015                 etapa@num 0016    __CFG_CPUDIV$OSC1_PLL2 000000  
            ??_atraso_ms 0003          mostravol@valorh 001A          mostravol@valori 001C  
        mostravol@valorl 001B         ___lwmod@dividend 0001       __end_of_mostratemp 0BBE  
            ??_serial_rx 0009              ??_serial_tx 0001              _serial_init 0E78  
            ??_mostravol 0018          ___lwmod@divisor 0003          ___lwmod@counter 0005  
